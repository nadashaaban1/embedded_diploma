/*
 * STM32_F103_C6_GPIO.h
 *
 *  Created on: Oct 20, 2023
 *      Author: Nada
 */

#ifndef INC_STM32_F103_C6_GPIO_H_
#define INC_STM32_F103_C6_GPIO_H_
/*
//-----------------------------
//Includes
#include "STM32F103x6.h"
//-----------------------------

//-----------------------------
//User type definitions (config structures)
typedef struct
{
	uint16_t GPIO_PinNumber; //specifies the GPIO pins to be configured
							//this parameter must be a value of @ref GPIO_PINS_define

	uint8_t GPIO_MODE; 		//specifies the operation mode for the selected bit
							//this parameter must be selected from @ref GPIO_MODE_define

	uint8_t GPIO_Output_Speed; //specifies the speed for the selected pins
							  //this parameter can be selected from @ref GPIO_SPEED_define
}GPIO_PinConfig_t;
//-----------------------------

//-----------------------------
//Macros Configuration References

	//@ref GPIO_PINS_define
#define GPIO_PIN_0						((uint16_t)0x0001)
#define GPIO_PIN_1						((uint16_t)0x0002)
#define GPIO_PIN_2						((uint16_t)0x0004)
#define GPIO_PIN_3						((uint16_t)0x0008)
#define GPIO_PIN_4						((uint16_t)0x0010)
#define GPIO_PIN_5						((uint16_t)0x0020)
#define GPIO_PIN_6						((uint16_t)0x0040)
#define GPIO_PIN_7						((uint16_t)0x0080)
#define GPIO_PIN_8						((uint16_t)0x0100)
#define GPIO_PIN_9						((uint16_t)0x0200)
#define GPIO_PIN_10						((uint16_t)0x0400)
#define GPIO_PIN_11						((uint16_t)0x0800)
#define GPIO_PIN_12						((uint16_t)0x1000)
#define GPIO_PIN_13						((uint16_t)0x2000)
#define GPIO_PIN_14						((uint16_t)0x4000)
#define GPIO_PIN_15						((uint16_t)0x8000)
#define GPIO_PIN_ALL					((uint16_t)0xFFFF)

#define GPIO_PIN_MASK					0x0000FFFFu //for assert test

	//@ref GPIO_MODE_define
#define GPIO_MODE_ANALOG 				0x00000000u //analog mode
#define GPIO_MODE_INPUT_FLO	 			0x00000001u //floating input
#define GPIO_MODE_INPUT_PU		 		0x00000002u //input with pull up
#define GPIO_MODE_INPUT_PD 				0x00000003u //input with pull down
#define GPIO_MODE_OUTPUT_PP 			0x00000004u //general purpose output push pull
#define GPIO_MODE_OUTPUT_OD 			0x00000005u	//general purpose output open drain
#define GPIO_MODE_OUPUT_AF_PP 			0x00000006u //alternate function output push pull
#define GPIO_MODE_OUTPUT_AF_OD 			0x00000007u //alternate function output open drain
#define GPIO_MODE_AF_INPUT 				0x00000008u	//alternate function input

	//@ref GPIO_SPEED_define
#define GPIO_SPEED_10M					0x00000001u //output mode, max speed 10MHz
#define GPIO_SPEED_2M					0x00000002u //output mode, max speed 2MHz
#define GPIO_SPEED_50M					0x00000003u //output mode, max speed 50MHz

	//@ref GPIO_PIN_state
#define GPIO_PIN_SET					1
#define GPIO_PIN_RESET					0

	//@ref GPIO_RETURN_LOCK
#define GPIO_RETURN_LOCK_Ok				1
#define GPIO_RETURN_LOCK_Error			0
//-----------------------------

/*@ref Module_REF_NAME_define
*/

/*
* ===============================================
* APIs Supported by "MCAL GPIO DRIVER"
* ===============================================
*//*
void MCAL_GPIO_Init(GPIO_Typedef* GPIOx, GPIO_PinConfig_t* PinConfig);
void MCAL_GPIO_DeInit(GPIO_Typedef* GPIOx);

uint8_t MCAL_GPIO_ReadPin(GPIO_Typedef* GPIOx, uint16_t PinNumber);
uint16_t MCAL_GPIO_ReadPort(GPIO_Typedef* GPIOx);

void MCAL_GPIO_WritePin(GPIO_Typedef* GPIOx, uint16_t PinNumber, uint8_t value);
void MCAL_GPIO_WritePort(GPIO_Typedef* GPIOx, uint16_t value);

void MCAL_GPIO_TogglePin(GPIO_Typedef* GPIOx, uint16_t PinNumber);

uint8_t MCAL_GPIO_LockPin(GPIO_Typedef* GPIOx, uint16_t PinNumber);
*/


/*
 * GPIO_driver.h
 *
 *  Created on: Oct 5, 2023
 *      Author: Eldeeb
 */

#ifndef INCLUDES_GPIO_DRIVER_H_
#define INCLUDES_GPIO_DRIVER_H_

//Includes
#include "STM32_F103C6.h"
//----------------------------------

//Config Structure

typedef struct
{
	uint16_t GPIO_PinNumber ;				//Specifies the GPIO pins to be configured.
											//This parameter must be set based on @ref GPIO_PINS_define

	uint8_t	GPIO_MODE	;					//Specifies the operating mode for the selected pin
											//This parameter can be a value of @ref GPIO_MODE_define

	uint8_t GPIO_OUTPUT_SPEED;				//Specifies the speed for the selected pin
											//This parameter can be a value of @ref GPIO_SPEED_define

}GPIO_PINConfig_t;


//-*-*-*-*-*-*-*-*-*-*-*-
//Macros Configuration References
//-*-*-*-*-*-*-*-*-*-*-*

// @ref GPIO_PINS_define
#define GPIO_PIN_0					((uint16_t)0x0001)  /*	Pin 0 selected 		*/
#define GPIO_PIN_1					((uint16_t)0x0002)  /*	Pin 1 selected 		*/
#define GPIO_PIN_2					((uint16_t)0x0004)  /*	Pin 2 selected 		*/
#define GPIO_PIN_3					((uint16_t)0x0008)  /*	Pin 3 selected 		*/
#define GPIO_PIN_4					((uint16_t)0x0010)  /*	Pin 4 selected 		*/
#define GPIO_PIN_5					((uint16_t)0x0020)  /*	Pin 5 selected 		*/
#define GPIO_PIN_6					((uint16_t)0x0040)  /*	Pin 6 selected 		*/
#define GPIO_PIN_7					((uint16_t)0x0080)  /*	Pin 7 selected 		*/
#define GPIO_PIN_8					((uint16_t)0x0100)  /*	Pin 8 selected 		*/
#define GPIO_PIN_9					((uint16_t)0x0200)  /*	Pin 9 selected 		*/
#define GPIO_PIN_10					((uint16_t)0x0400)  /*	Pin 10 selected 	*/
#define GPIO_PIN_11					((uint16_t)0x0800)  /*	Pin 11 selected 	*/
#define GPIO_PIN_12					((uint16_t)0x1000)  /*	Pin 12 selected 	*/
#define GPIO_PIN_13					((uint16_t)0x2000)  /*	Pin 13 selected 	*/
#define GPIO_PIN_14					((uint16_t)0x4000)  /*	Pin 14 selected 	*/
#define GPIO_PIN_15					((uint16_t)0x8000)  /*	Pin 15 selected 	*/
#define GPIO_PIN_All				((uint16_t)0xFFFF)  /*	All pins selected 	*/

#define GPIO_PIN_MASK				0x0000FFFFu  		/*Pin Mask for assert test */

//@ref GPIO_MODE_define

//0: Analog mode
//1: Floating input (reset state)
//2: Input with pull-up
//3: pull-down
//4: General purpose output push-pull
//5: General purpose output Open-drain
//6: Alternate function output Push-pull
//7: Alternate function output Open-drain
//8: Alternate function input Open-drain

#define GPIO_MODE_Analog 					0x00000000u 	//Analog mode
#define GPIO_MODE_INPUT_FLO 				0x00000001u		//Floating input
#define GPIO_MODE_INPUT_PU 					0x00000002u		//Input with pull-up
#define GPIO_MODE_INPUT_PD 					0x00000003u		//pull-down
#define GPIO_MODE_OUTPUT_PP 				0x00000004u		//General purpose output push-pull
#define GPIO_MODE_OUTPUT_OD 				0x00000005u		//General purpose output Open-drain
#define GPIO_MODE_OUTPUT_AF_PP 				0x00000006u		//Alternate function output Push-pull
#define GPIO_MODE_OUTPUT_AF_OD				0x00000006u		//Alternate function output Open-drain
#define GPIO_MODE_AF_INPUT					0x00000007u		//Alternate function input Open-drain


//@ref GPIO_SPEED_define
//1: Output mode, max speed 10 MHz.
//2: Output mode, max speed 2 MHz.
//3: Output mode, max speed 50 MHz.

#define GPIO_SPEED_10M					0x00000001u			//Output mode , max speed 10MHz
#define GPIO_SPEED_2M					0x00000002u			//Output mode , max speed 2MHz
#define GPIO_SPEED_50M					0x00000003u			//Output mode , max speed 50MHz

//@ref GPIO_PIN_state
#define GPIO_PIN_SET 						1
#define GPIO_PIN_RESET 						0

//@ref GPIO_RETURN_LOCK
#define GPIO_RETURN_LOCK_ENABLE				1
#define GPIO_RETURN_LOCK_ERROR	 			0


/*
 * ============================================================================================
 * 									APIs Supported by "MCAL GPIO DRIVER"
 * 	===========================================================================================
 */
void MCAL_GPIO_Init(GPIO_Typedef *GPIOx,GPIO_PINConfig_t* PinConfig);
void MCAL_GPIO_DeInit(GPIO_Typedef *GPIOx);

uint8_t MCAL_GPIO_ReadPin(GPIO_Typedef *GPIOx,uint16_t PinNumber);
uint16_t MCAL_GPIO_ReadPort(GPIO_Typedef *GPIOx);


void MCAL_GPIO_WritePin(GPIO_Typedef *GPIOx,uint16_t PinNumber,uint8_t Value);
void MCAL_GPIO_WritePort(GPIO_Typedef *GPIOx,uint16_t Value);

void MCAL_GPIO_TogglePin(GPIO_Typedef *GPIOx,uint16_t PinNumber);

uint8_t MCAL_GPIO_LockPin(GPIO_Typedef *GPIOx,uint16_t PinNumber);

#endif /* INCLUDES_GPIO_DRIVER_H_ */
#endif /* INC_STM32_F103_C6_GPIO_H_ */
