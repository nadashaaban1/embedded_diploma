
lcd_keypad_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b1a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00001b1a  00001b8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d0c  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bb  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bfe  00000000  00000000  000031f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00003df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c6  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000446  00000000  00000000  000044ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00004930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <main>
      7a:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_INIT>:

int keypad_rows[]={R0,R1,R2,R3};
int keypad_cols[]={C0,C1,C2,C3};

void KEYPAD_INIT()
{
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
	dataDIR_KEYPAD_PORT &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3)); //making the rows as outputs
      8a:	81 e3       	ldi	r24, 0x31	; 49
      8c:	90 e0       	ldi	r25, 0x00	; 0
      8e:	21 e3       	ldi	r18, 0x31	; 49
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	f9 01       	movw	r30, r18
      94:	20 81       	ld	r18, Z
      96:	20 7f       	andi	r18, 0xF0	; 240
      98:	fc 01       	movw	r30, r24
      9a:	20 83       	st	Z, r18
	dataDIR_KEYPAD_PORT |= ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3)); //making the columns as inputs
      9c:	81 e3       	ldi	r24, 0x31	; 49
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	21 e3       	ldi	r18, 0x31	; 49
      a2:	30 e0       	ldi	r19, 0x00	; 0
      a4:	f9 01       	movw	r30, r18
      a6:	20 81       	ld	r18, Z
      a8:	20 6f       	ori	r18, 0xF0	; 240
      aa:	fc 01       	movw	r30, r24
      ac:	20 83       	st	Z, r18
	KEYPAD_PORT = 0xFF;
      ae:	82 e3       	ldi	r24, 0x32	; 50
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	2f ef       	ldi	r18, 0xFF	; 255
      b4:	fc 01       	movw	r30, r24
      b6:	20 83       	st	Z, r18
}
      b8:	00 00       	nop
      ba:	df 91       	pop	r29
      bc:	cf 91       	pop	r28
      be:	08 95       	ret

000000c0 <KEYPAD_GET_CHAR>:

char KEYPAD_GET_CHAR()
{
      c0:	cf 93       	push	r28
      c2:	df 93       	push	r29
      c4:	00 d0       	rcall	.+0      	; 0xc6 <KEYPAD_GET_CHAR+0x6>
      c6:	00 d0       	rcall	.+0      	; 0xc8 <KEYPAD_GET_CHAR+0x8>
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
	int i,j;
	for(i=0; i<4; i++)
      cc:	1a 82       	std	Y+2, r1	; 0x02
      ce:	19 82       	std	Y+1, r1	; 0x01
      d0:	13 c1       	rjmp	.+550    	; 0x2f8 <KEYPAD_GET_CHAR+0x238>
	{
		KEYPAD_PORT |= ((1<<keypad_cols[0]) | (1<<keypad_cols[1]) | (1<<keypad_cols[2]) | (1<<keypad_cols[3]));
      d2:	82 e3       	ldi	r24, 0x32	; 50
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	22 e3       	ldi	r18, 0x32	; 50
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	72 2f       	mov	r23, r18
      e0:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <keypad_cols>
      e4:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <keypad_cols+0x1>
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <KEYPAD_GET_CHAR+0x32>
      ee:	22 0f       	add	r18, r18
      f0:	33 1f       	adc	r19, r19
      f2:	4a 95       	dec	r20
      f4:	e2 f7       	brpl	.-8      	; 0xee <KEYPAD_GET_CHAR+0x2e>
      f6:	62 2f       	mov	r22, r18
      f8:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <keypad_cols+0x2>
      fc:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <keypad_cols+0x3>
     100:	21 e0       	ldi	r18, 0x01	; 1
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <KEYPAD_GET_CHAR+0x4a>
     106:	22 0f       	add	r18, r18
     108:	33 1f       	adc	r19, r19
     10a:	4a 95       	dec	r20
     10c:	e2 f7       	brpl	.-8      	; 0x106 <KEYPAD_GET_CHAR+0x46>
     10e:	62 2b       	or	r22, r18
     110:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <keypad_cols+0x4>
     114:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <keypad_cols+0x5>
     118:	21 e0       	ldi	r18, 0x01	; 1
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <KEYPAD_GET_CHAR+0x62>
     11e:	22 0f       	add	r18, r18
     120:	33 1f       	adc	r19, r19
     122:	4a 95       	dec	r20
     124:	e2 f7       	brpl	.-8      	; 0x11e <KEYPAD_GET_CHAR+0x5e>
     126:	62 2b       	or	r22, r18
     128:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <keypad_cols+0x6>
     12c:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <keypad_cols+0x7>
     130:	21 e0       	ldi	r18, 0x01	; 1
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	02 c0       	rjmp	.+4      	; 0x13a <KEYPAD_GET_CHAR+0x7a>
     136:	22 0f       	add	r18, r18
     138:	33 1f       	adc	r19, r19
     13a:	4a 95       	dec	r20
     13c:	e2 f7       	brpl	.-8      	; 0x136 <KEYPAD_GET_CHAR+0x76>
     13e:	26 2b       	or	r18, r22
     140:	27 2b       	or	r18, r23
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
		KEYPAD_PORT &= ~(1<<keypad_cols[i]);
     146:	82 e3       	ldi	r24, 0x32	; 50
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	22 e3       	ldi	r18, 0x32	; 50
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	62 2f       	mov	r22, r18
     154:	29 81       	ldd	r18, Y+1	; 0x01
     156:	3a 81       	ldd	r19, Y+2	; 0x02
     158:	22 0f       	add	r18, r18
     15a:	33 1f       	adc	r19, r19
     15c:	28 59       	subi	r18, 0x98	; 152
     15e:	3f 4f       	sbci	r19, 0xFF	; 255
     160:	f9 01       	movw	r30, r18
     162:	40 81       	ld	r20, Z
     164:	51 81       	ldd	r21, Z+1	; 0x01
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	02 c0       	rjmp	.+4      	; 0x170 <KEYPAD_GET_CHAR+0xb0>
     16c:	22 0f       	add	r18, r18
     16e:	33 1f       	adc	r19, r19
     170:	4a 95       	dec	r20
     172:	e2 f7       	brpl	.-8      	; 0x16c <KEYPAD_GET_CHAR+0xac>
     174:	20 95       	com	r18
     176:	26 23       	and	r18, r22
     178:	fc 01       	movw	r30, r24
     17a:	20 83       	st	Z, r18
		for(j=0; j<4; j++)
     17c:	1c 82       	std	Y+4, r1	; 0x04
     17e:	1b 82       	std	Y+3, r1	; 0x03
     180:	b1 c0       	rjmp	.+354    	; 0x2e4 <KEYPAD_GET_CHAR+0x224>
		{
			if(!(KEYPAD_PIN & (1<<keypad_rows[j])))
     182:	80 e3       	ldi	r24, 0x30	; 48
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	fc 01       	movw	r30, r24
     188:	80 81       	ld	r24, Z
     18a:	88 2f       	mov	r24, r24
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	2b 81       	ldd	r18, Y+3	; 0x03
     190:	3c 81       	ldd	r19, Y+4	; 0x04
     192:	22 0f       	add	r18, r18
     194:	33 1f       	adc	r19, r19
     196:	20 5a       	subi	r18, 0xA0	; 160
     198:	3f 4f       	sbci	r19, 0xFF	; 255
     19a:	f9 01       	movw	r30, r18
     19c:	20 81       	ld	r18, Z
     19e:	31 81       	ldd	r19, Z+1	; 0x01
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <KEYPAD_GET_CHAR+0xe6>
     1a2:	95 95       	asr	r25
     1a4:	87 95       	ror	r24
     1a6:	2a 95       	dec	r18
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <KEYPAD_GET_CHAR+0xe2>
     1aa:	81 70       	andi	r24, 0x01	; 1
     1ac:	99 27       	eor	r25, r25
     1ae:	89 2b       	or	r24, r25
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <KEYPAD_GET_CHAR+0xf4>
     1b2:	93 c0       	rjmp	.+294    	; 0x2da <KEYPAD_GET_CHAR+0x21a>
			{
				while(!(KEYPAD_PIN & (1<<keypad_rows[j])));
     1b4:	00 00       	nop
     1b6:	80 e3       	ldi	r24, 0x30	; 48
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	fc 01       	movw	r30, r24
     1bc:	80 81       	ld	r24, Z
     1be:	88 2f       	mov	r24, r24
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	2b 81       	ldd	r18, Y+3	; 0x03
     1c4:	3c 81       	ldd	r19, Y+4	; 0x04
     1c6:	22 0f       	add	r18, r18
     1c8:	33 1f       	adc	r19, r19
     1ca:	20 5a       	subi	r18, 0xA0	; 160
     1cc:	3f 4f       	sbci	r19, 0xFF	; 255
     1ce:	f9 01       	movw	r30, r18
     1d0:	20 81       	ld	r18, Z
     1d2:	31 81       	ldd	r19, Z+1	; 0x01
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <KEYPAD_GET_CHAR+0x11a>
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	2a 95       	dec	r18
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <KEYPAD_GET_CHAR+0x116>
     1de:	81 70       	andi	r24, 0x01	; 1
     1e0:	99 27       	eor	r25, r25
     1e2:	89 2b       	or	r24, r25
     1e4:	41 f3       	breq	.-48     	; 0x1b6 <KEYPAD_GET_CHAR+0xf6>
				switch(i)
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	91 05       	cpc	r25, r1
     1ee:	31 f1       	breq	.+76     	; 0x23c <KEYPAD_GET_CHAR+0x17c>
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	91 05       	cpc	r25, r1
     1f4:	1c f4       	brge	.+6      	; 0x1fc <KEYPAD_GET_CHAR+0x13c>
     1f6:	89 2b       	or	r24, r25
     1f8:	41 f0       	breq	.+16     	; 0x20a <KEYPAD_GET_CHAR+0x14a>
     1fa:	6f c0       	rjmp	.+222    	; 0x2da <KEYPAD_GET_CHAR+0x21a>
     1fc:	82 30       	cpi	r24, 0x02	; 2
     1fe:	91 05       	cpc	r25, r1
     200:	a9 f1       	breq	.+106    	; 0x26c <KEYPAD_GET_CHAR+0x1ac>
     202:	03 97       	sbiw	r24, 0x03	; 3
     204:	09 f4       	brne	.+2      	; 0x208 <KEYPAD_GET_CHAR+0x148>
     206:	4a c0       	rjmp	.+148    	; 0x29c <KEYPAD_GET_CHAR+0x1dc>
     208:	68 c0       	rjmp	.+208    	; 0x2da <KEYPAD_GET_CHAR+0x21a>
				{
					case(0):
					{
						if(j==0) return '7';
     20a:	8b 81       	ldd	r24, Y+3	; 0x03
     20c:	9c 81       	ldd	r25, Y+4	; 0x04
     20e:	89 2b       	or	r24, r25
     210:	11 f4       	brne	.+4      	; 0x216 <KEYPAD_GET_CHAR+0x156>
     212:	87 e3       	ldi	r24, 0x37	; 55
     214:	77 c0       	rjmp	.+238    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==1) return '4';
     216:	8b 81       	ldd	r24, Y+3	; 0x03
     218:	9c 81       	ldd	r25, Y+4	; 0x04
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	11 f4       	brne	.+4      	; 0x222 <KEYPAD_GET_CHAR+0x162>
     21e:	84 e3       	ldi	r24, 0x34	; 52
     220:	71 c0       	rjmp	.+226    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==2) return '1';
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	9c 81       	ldd	r25, Y+4	; 0x04
     226:	02 97       	sbiw	r24, 0x02	; 2
     228:	11 f4       	brne	.+4      	; 0x22e <KEYPAD_GET_CHAR+0x16e>
     22a:	81 e3       	ldi	r24, 0x31	; 49
     22c:	6b c0       	rjmp	.+214    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==3) return '?';
     22e:	8b 81       	ldd	r24, Y+3	; 0x03
     230:	9c 81       	ldd	r25, Y+4	; 0x04
     232:	03 97       	sbiw	r24, 0x03	; 3
     234:	09 f0       	breq	.+2      	; 0x238 <KEYPAD_GET_CHAR+0x178>
     236:	4a c0       	rjmp	.+148    	; 0x2cc <KEYPAD_GET_CHAR+0x20c>
     238:	8f e3       	ldi	r24, 0x3F	; 63
     23a:	64 c0       	rjmp	.+200    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						break;
					}
					case(1):
					{
						if(j==0) return '8';
     23c:	8b 81       	ldd	r24, Y+3	; 0x03
     23e:	9c 81       	ldd	r25, Y+4	; 0x04
     240:	89 2b       	or	r24, r25
     242:	11 f4       	brne	.+4      	; 0x248 <KEYPAD_GET_CHAR+0x188>
     244:	88 e3       	ldi	r24, 0x38	; 56
     246:	5e c0       	rjmp	.+188    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==1) return '5';
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	9c 81       	ldd	r25, Y+4	; 0x04
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	11 f4       	brne	.+4      	; 0x254 <KEYPAD_GET_CHAR+0x194>
     250:	85 e3       	ldi	r24, 0x35	; 53
     252:	58 c0       	rjmp	.+176    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==2) return '2';
     254:	8b 81       	ldd	r24, Y+3	; 0x03
     256:	9c 81       	ldd	r25, Y+4	; 0x04
     258:	02 97       	sbiw	r24, 0x02	; 2
     25a:	11 f4       	brne	.+4      	; 0x260 <KEYPAD_GET_CHAR+0x1a0>
     25c:	82 e3       	ldi	r24, 0x32	; 50
     25e:	52 c0       	rjmp	.+164    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==3) return '0';
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	03 97       	sbiw	r24, 0x03	; 3
     266:	a1 f5       	brne	.+104    	; 0x2d0 <KEYPAD_GET_CHAR+0x210>
     268:	80 e3       	ldi	r24, 0x30	; 48
     26a:	4c c0       	rjmp	.+152    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						break;
					}
					case(2):
					{
						if(j==0) return '9';
     26c:	8b 81       	ldd	r24, Y+3	; 0x03
     26e:	9c 81       	ldd	r25, Y+4	; 0x04
     270:	89 2b       	or	r24, r25
     272:	11 f4       	brne	.+4      	; 0x278 <KEYPAD_GET_CHAR+0x1b8>
     274:	89 e3       	ldi	r24, 0x39	; 57
     276:	46 c0       	rjmp	.+140    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==1) return '6';
     278:	8b 81       	ldd	r24, Y+3	; 0x03
     27a:	9c 81       	ldd	r25, Y+4	; 0x04
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	11 f4       	brne	.+4      	; 0x284 <KEYPAD_GET_CHAR+0x1c4>
     280:	86 e3       	ldi	r24, 0x36	; 54
     282:	40 c0       	rjmp	.+128    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==2) return '3';
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	9c 81       	ldd	r25, Y+4	; 0x04
     288:	02 97       	sbiw	r24, 0x02	; 2
     28a:	11 f4       	brne	.+4      	; 0x290 <KEYPAD_GET_CHAR+0x1d0>
     28c:	83 e3       	ldi	r24, 0x33	; 51
     28e:	3a c0       	rjmp	.+116    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==3) return '=';
     290:	8b 81       	ldd	r24, Y+3	; 0x03
     292:	9c 81       	ldd	r25, Y+4	; 0x04
     294:	03 97       	sbiw	r24, 0x03	; 3
     296:	f1 f4       	brne	.+60     	; 0x2d4 <KEYPAD_GET_CHAR+0x214>
     298:	8d e3       	ldi	r24, 0x3D	; 61
     29a:	34 c0       	rjmp	.+104    	; 0x304 <KEYPAD_GET_CHAR+0x244>
						break;
					}
					case(3):
					{
						if(j==0) return '/';
     29c:	8b 81       	ldd	r24, Y+3	; 0x03
     29e:	9c 81       	ldd	r25, Y+4	; 0x04
     2a0:	89 2b       	or	r24, r25
     2a2:	11 f4       	brne	.+4      	; 0x2a8 <KEYPAD_GET_CHAR+0x1e8>
     2a4:	8f e2       	ldi	r24, 0x2F	; 47
     2a6:	2e c0       	rjmp	.+92     	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==1) return '*';
     2a8:	8b 81       	ldd	r24, Y+3	; 0x03
     2aa:	9c 81       	ldd	r25, Y+4	; 0x04
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <KEYPAD_GET_CHAR+0x1f4>
     2b0:	8a e2       	ldi	r24, 0x2A	; 42
     2b2:	28 c0       	rjmp	.+80     	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==2) return '-';
     2b4:	8b 81       	ldd	r24, Y+3	; 0x03
     2b6:	9c 81       	ldd	r25, Y+4	; 0x04
     2b8:	02 97       	sbiw	r24, 0x02	; 2
     2ba:	11 f4       	brne	.+4      	; 0x2c0 <KEYPAD_GET_CHAR+0x200>
     2bc:	8d e2       	ldi	r24, 0x2D	; 45
     2be:	22 c0       	rjmp	.+68     	; 0x304 <KEYPAD_GET_CHAR+0x244>
						else if(j==3) return '+';
     2c0:	8b 81       	ldd	r24, Y+3	; 0x03
     2c2:	9c 81       	ldd	r25, Y+4	; 0x04
     2c4:	03 97       	sbiw	r24, 0x03	; 3
     2c6:	41 f4       	brne	.+16     	; 0x2d8 <KEYPAD_GET_CHAR+0x218>
     2c8:	8b e2       	ldi	r24, 0x2B	; 43
     2ca:	1c c0       	rjmp	.+56     	; 0x304 <KEYPAD_GET_CHAR+0x244>
					{
						if(j==0) return '7';
						else if(j==1) return '4';
						else if(j==2) return '1';
						else if(j==3) return '?';
						break;
     2cc:	00 00       	nop
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <KEYPAD_GET_CHAR+0x21a>
					{
						if(j==0) return '8';
						else if(j==1) return '5';
						else if(j==2) return '2';
						else if(j==3) return '0';
						break;
     2d0:	00 00       	nop
     2d2:	03 c0       	rjmp	.+6      	; 0x2da <KEYPAD_GET_CHAR+0x21a>
					{
						if(j==0) return '9';
						else if(j==1) return '6';
						else if(j==2) return '3';
						else if(j==3) return '=';
						break;
     2d4:	00 00       	nop
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <KEYPAD_GET_CHAR+0x21a>
					{
						if(j==0) return '/';
						else if(j==1) return '*';
						else if(j==2) return '-';
						else if(j==3) return '+';
						break;
     2d8:	00 00       	nop
	int i,j;
	for(i=0; i<4; i++)
	{
		KEYPAD_PORT |= ((1<<keypad_cols[0]) | (1<<keypad_cols[1]) | (1<<keypad_cols[2]) | (1<<keypad_cols[3]));
		KEYPAD_PORT &= ~(1<<keypad_cols[i]);
		for(j=0; j<4; j++)
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	9c 81       	ldd	r25, Y+4	; 0x04
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	9c 83       	std	Y+4, r25	; 0x04
     2e2:	8b 83       	std	Y+3, r24	; 0x03
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	9c 81       	ldd	r25, Y+4	; 0x04
     2e8:	04 97       	sbiw	r24, 0x04	; 4
     2ea:	0c f4       	brge	.+2      	; 0x2ee <KEYPAD_GET_CHAR+0x22e>
     2ec:	4a cf       	rjmp	.-364    	; 0x182 <KEYPAD_GET_CHAR+0xc2>
}

char KEYPAD_GET_CHAR()
{
	int i,j;
	for(i=0; i<4; i++)
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	9a 81       	ldd	r25, Y+2	; 0x02
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	9a 83       	std	Y+2, r25	; 0x02
     2f6:	89 83       	std	Y+1, r24	; 0x01
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	9a 81       	ldd	r25, Y+2	; 0x02
     2fc:	04 97       	sbiw	r24, 0x04	; 4
     2fe:	0c f4       	brge	.+2      	; 0x302 <KEYPAD_GET_CHAR+0x242>
     300:	e8 ce       	rjmp	.-560    	; 0xd2 <KEYPAD_GET_CHAR+0x12>
					}
				}
			}
		}
	}
	return 'N';
     302:	8e e4       	ldi	r24, 0x4E	; 78
}
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <KEYPAD_CALC>:

float KEYPAD_CALC(int x, int y, char op)
{
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	29 97       	sbiw	r28, 0x09	; 9
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	9e 83       	std	Y+6, r25	; 0x06
     330:	8d 83       	std	Y+5, r24	; 0x05
     332:	78 87       	std	Y+8, r23	; 0x08
     334:	6f 83       	std	Y+7, r22	; 0x07
     336:	49 87       	std	Y+9, r20	; 0x09
	float val=0;
     338:	19 82       	std	Y+1, r1	; 0x01
     33a:	1a 82       	std	Y+2, r1	; 0x02
     33c:	1b 82       	std	Y+3, r1	; 0x03
     33e:	1c 82       	std	Y+4, r1	; 0x04
	switch(op)
     340:	89 85       	ldd	r24, Y+9	; 0x09
     342:	88 2f       	mov	r24, r24
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	8b 32       	cpi	r24, 0x2B	; 43
     348:	91 05       	cpc	r25, r1
     34a:	89 f0       	breq	.+34     	; 0x36e <KEYPAD_CALC+0x5c>
     34c:	8c 32       	cpi	r24, 0x2C	; 44
     34e:	91 05       	cpc	r25, r1
     350:	3c f4       	brge	.+14     	; 0x360 <KEYPAD_CALC+0x4e>
     352:	84 32       	cpi	r24, 0x24	; 36
     354:	91 05       	cpc	r25, r1
     356:	09 f4       	brne	.+2      	; 0x35a <KEYPAD_CALC+0x48>
     358:	7d c0       	rjmp	.+250    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     35a:	8a 97       	sbiw	r24, 0x2a	; 42
     35c:	a1 f1       	breq	.+104    	; 0x3c6 <KEYPAD_CALC+0xb4>
     35e:	76 c0       	rjmp	.+236    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     360:	8d 32       	cpi	r24, 0x2D	; 45
     362:	91 05       	cpc	r25, r1
     364:	c9 f0       	breq	.+50     	; 0x398 <KEYPAD_CALC+0x86>
     366:	8f 97       	sbiw	r24, 0x2f	; 47
     368:	09 f4       	brne	.+2      	; 0x36c <KEYPAD_CALC+0x5a>
     36a:	47 c0       	rjmp	.+142    	; 0x3fa <KEYPAD_CALC+0xe8>
     36c:	6f c0       	rjmp	.+222    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	{
		case '+':
			val= x+y;	
     36e:	2d 81       	ldd	r18, Y+5	; 0x05
     370:	3e 81       	ldd	r19, Y+6	; 0x06
     372:	8f 81       	ldd	r24, Y+7	; 0x07
     374:	98 85       	ldd	r25, Y+8	; 0x08
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
     37a:	09 2e       	mov	r0, r25
     37c:	00 0c       	add	r0, r0
     37e:	aa 0b       	sbc	r26, r26
     380:	bb 0b       	sbc	r27, r27
     382:	bc 01       	movw	r22, r24
     384:	cd 01       	movw	r24, r26
     386:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__floatsisf>
     38a:	dc 01       	movw	r26, r24
     38c:	cb 01       	movw	r24, r22
     38e:	89 83       	std	Y+1, r24	; 0x01
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	ab 83       	std	Y+3, r26	; 0x03
     394:	bc 83       	std	Y+4, r27	; 0x04
			break;
     396:	61 c0       	rjmp	.+194    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		case '-':
			val= x-y;
     398:	2d 81       	ldd	r18, Y+5	; 0x05
     39a:	3e 81       	ldd	r19, Y+6	; 0x06
     39c:	8f 81       	ldd	r24, Y+7	; 0x07
     39e:	98 85       	ldd	r25, Y+8	; 0x08
     3a0:	a9 01       	movw	r20, r18
     3a2:	48 1b       	sub	r20, r24
     3a4:	59 0b       	sbc	r21, r25
     3a6:	ca 01       	movw	r24, r20
     3a8:	09 2e       	mov	r0, r25
     3aa:	00 0c       	add	r0, r0
     3ac:	aa 0b       	sbc	r26, r26
     3ae:	bb 0b       	sbc	r27, r27
     3b0:	bc 01       	movw	r22, r24
     3b2:	cd 01       	movw	r24, r26
     3b4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__floatsisf>
     3b8:	dc 01       	movw	r26, r24
     3ba:	cb 01       	movw	r24, r22
     3bc:	89 83       	std	Y+1, r24	; 0x01
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	ab 83       	std	Y+3, r26	; 0x03
     3c2:	bc 83       	std	Y+4, r27	; 0x04
			break;
     3c4:	4a c0       	rjmp	.+148    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		case '*':
			val= x*y;
     3c6:	4d 81       	ldd	r20, Y+5	; 0x05
     3c8:	5e 81       	ldd	r21, Y+6	; 0x06
     3ca:	2f 81       	ldd	r18, Y+7	; 0x07
     3cc:	38 85       	ldd	r19, Y+8	; 0x08
     3ce:	42 9f       	mul	r20, r18
     3d0:	c0 01       	movw	r24, r0
     3d2:	43 9f       	mul	r20, r19
     3d4:	90 0d       	add	r25, r0
     3d6:	52 9f       	mul	r21, r18
     3d8:	90 0d       	add	r25, r0
     3da:	11 24       	eor	r1, r1
     3dc:	09 2e       	mov	r0, r25
     3de:	00 0c       	add	r0, r0
     3e0:	aa 0b       	sbc	r26, r26
     3e2:	bb 0b       	sbc	r27, r27
     3e4:	bc 01       	movw	r22, r24
     3e6:	cd 01       	movw	r24, r26
     3e8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__floatsisf>
     3ec:	dc 01       	movw	r26, r24
     3ee:	cb 01       	movw	r24, r22
     3f0:	89 83       	std	Y+1, r24	; 0x01
     3f2:	9a 83       	std	Y+2, r25	; 0x02
     3f4:	ab 83       	std	Y+3, r26	; 0x03
     3f6:	bc 83       	std	Y+4, r27	; 0x04
			break;
     3f8:	30 c0       	rjmp	.+96     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		case '/':
			if(y != 0)
     3fa:	8f 81       	ldd	r24, Y+7	; 0x07
     3fc:	98 85       	ldd	r25, Y+8	; 0x08
     3fe:	89 2b       	or	r24, r25
     400:	59 f1       	breq	.+86     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
				val= (float)x/(float)y;
     402:	8d 81       	ldd	r24, Y+5	; 0x05
     404:	9e 81       	ldd	r25, Y+6	; 0x06
     406:	09 2e       	mov	r0, r25
     408:	00 0c       	add	r0, r0
     40a:	aa 0b       	sbc	r26, r26
     40c:	bb 0b       	sbc	r27, r27
     40e:	bc 01       	movw	r22, r24
     410:	cd 01       	movw	r24, r26
     412:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__floatsisf>
     416:	6b 01       	movw	r12, r22
     418:	7c 01       	movw	r14, r24
     41a:	8f 81       	ldd	r24, Y+7	; 0x07
     41c:	98 85       	ldd	r25, Y+8	; 0x08
     41e:	09 2e       	mov	r0, r25
     420:	00 0c       	add	r0, r0
     422:	aa 0b       	sbc	r26, r26
     424:	bb 0b       	sbc	r27, r27
     426:	bc 01       	movw	r22, r24
     428:	cd 01       	movw	r24, r26
     42a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__floatsisf>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	9c 01       	movw	r18, r24
     434:	ad 01       	movw	r20, r26
     436:	c7 01       	movw	r24, r14
     438:	b6 01       	movw	r22, r12
     43a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__divsf3>
     43e:	dc 01       	movw	r26, r24
     440:	cb 01       	movw	r24, r22
     442:	89 83       	std	Y+1, r24	; 0x01
     444:	9a 83       	std	Y+2, r25	; 0x02
     446:	ab 83       	std	Y+3, r26	; 0x03
     448:	bc 83       	std	Y+4, r27	; 0x04
			break;
     44a:	06 c0       	rjmp	.+12     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
		case '$':
			break;
		default:
			return 0;
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	dc 01       	movw	r26, r24
     452:	07 c0       	rjmp	.+14     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		case '/':
			if(y != 0)
				val= (float)x/(float)y;
			break;
		case '$':
			break;
     454:	00 00       	nop
     456:	01 c0       	rjmp	.+2      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
			val= x*y;
			break;
		case '/':
			if(y != 0)
				val= (float)x/(float)y;
			break;
     458:	00 00       	nop
		case '$':
			break;
		default:
			return 0;
	}	
	return val;
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	ab 81       	ldd	r26, Y+3	; 0x03
     460:	bc 81       	ldd	r27, Y+4	; 0x04
     462:	bc 01       	movw	r22, r24
     464:	cd 01       	movw	r24, r26
     466:	29 96       	adiw	r28, 0x09	; 9
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	cd bf       	out	0x3d, r28	; 61
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	cf 90       	pop	r12
     47e:	08 95       	ret

00000480 <LCD_init>:
 */ 

#include "lcd.h"

void LCD_init(void)
{
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	6c 97       	sbiw	r28, 0x1c	; 28
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	a0 ea       	ldi	r26, 0xA0	; 160
     49a:	b1 e4       	ldi	r27, 0x41	; 65
     49c:	89 83       	std	Y+1, r24	; 0x01
     49e:	9a 83       	std	Y+2, r25	; 0x02
     4a0:	ab 83       	std	Y+3, r26	; 0x03
     4a2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	4a e7       	ldi	r20, 0x7A	; 122
     4aa:	53 e4       	ldi	r21, 0x43	; 67
     4ac:	69 81       	ldd	r22, Y+1	; 0x01
     4ae:	7a 81       	ldd	r23, Y+2	; 0x02
     4b0:	8b 81       	ldd	r24, Y+3	; 0x03
     4b2:	9c 81       	ldd	r25, Y+4	; 0x04
     4b4:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	8b 8b       	std	Y+19, r24	; 0x13
     4be:	9c 8b       	std	Y+20, r25	; 0x14
     4c0:	ad 8b       	std	Y+21, r26	; 0x15
     4c2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 e8       	ldi	r20, 0x80	; 128
     4ca:	5f e3       	ldi	r21, 0x3F	; 63
     4cc:	6b 89       	ldd	r22, Y+19	; 0x13
     4ce:	7c 89       	ldd	r23, Y+20	; 0x14
     4d0:	8d 89       	ldd	r24, Y+21	; 0x15
     4d2:	9e 89       	ldd	r25, Y+22	; 0x16
     4d4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__cmpsf2>
     4d8:	88 23       	and	r24, r24
     4da:	2c f4       	brge	.+10     	; 0x4e6 <LCD_init+0x66>
		__ticks = 1;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	98 8f       	std	Y+24, r25	; 0x18
     4e2:	8f 8b       	std	Y+23, r24	; 0x17
     4e4:	3f c0       	rjmp	.+126    	; 0x564 <LCD_init+0xe4>
	else if (__tmp > 65535)
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	3f ef       	ldi	r19, 0xFF	; 255
     4ea:	4f e7       	ldi	r20, 0x7F	; 127
     4ec:	57 e4       	ldi	r21, 0x47	; 71
     4ee:	6b 89       	ldd	r22, Y+19	; 0x13
     4f0:	7c 89       	ldd	r23, Y+20	; 0x14
     4f2:	8d 89       	ldd	r24, Y+21	; 0x15
     4f4:	9e 89       	ldd	r25, Y+22	; 0x16
     4f6:	0e 94 2f 0a 	call	0x145e	; 0x145e <__gesf2>
     4fa:	18 16       	cp	r1, r24
     4fc:	4c f5       	brge	.+82     	; 0x550 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e2       	ldi	r20, 0x20	; 32
     504:	51 e4       	ldi	r21, 0x41	; 65
     506:	69 81       	ldd	r22, Y+1	; 0x01
     508:	7a 81       	ldd	r23, Y+2	; 0x02
     50a:	8b 81       	ldd	r24, Y+3	; 0x03
     50c:	9c 81       	ldd	r25, Y+4	; 0x04
     50e:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	bc 01       	movw	r22, r24
     518:	cd 01       	movw	r24, r26
     51a:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	98 8f       	std	Y+24, r25	; 0x18
     524:	8f 8b       	std	Y+23, r24	; 0x17
     526:	0f c0       	rjmp	.+30     	; 0x546 <LCD_init+0xc6>
     528:	89 e1       	ldi	r24, 0x19	; 25
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	9a 8f       	std	Y+26, r25	; 0x1a
     52e:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     530:	89 8d       	ldd	r24, Y+25	; 0x19
     532:	9a 8d       	ldd	r25, Y+26	; 0x1a
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <LCD_init+0xb4>
     538:	9a 8f       	std	Y+26, r25	; 0x1a
     53a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     53c:	8f 89       	ldd	r24, Y+23	; 0x17
     53e:	98 8d       	ldd	r25, Y+24	; 0x18
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	98 8f       	std	Y+24, r25	; 0x18
     544:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     546:	8f 89       	ldd	r24, Y+23	; 0x17
     548:	98 8d       	ldd	r25, Y+24	; 0x18
     54a:	89 2b       	or	r24, r25
     54c:	69 f7       	brne	.-38     	; 0x528 <LCD_init+0xa8>
     54e:	14 c0       	rjmp	.+40     	; 0x578 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     550:	6b 89       	ldd	r22, Y+19	; 0x13
     552:	7c 89       	ldd	r23, Y+20	; 0x14
     554:	8d 89       	ldd	r24, Y+21	; 0x15
     556:	9e 89       	ldd	r25, Y+22	; 0x16
     558:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     55c:	dc 01       	movw	r26, r24
     55e:	cb 01       	movw	r24, r22
     560:	98 8f       	std	Y+24, r25	; 0x18
     562:	8f 8b       	std	Y+23, r24	; 0x17
     564:	8f 89       	ldd	r24, Y+23	; 0x17
     566:	98 8d       	ldd	r25, Y+24	; 0x18
     568:	9c 8f       	std	Y+28, r25	; 0x1c
     56a:	8b 8f       	std	Y+27, r24	; 0x1b
     56c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     56e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <LCD_init+0xf0>
     574:	9c 8f       	std	Y+28, r25	; 0x1c
     576:	8b 8f       	std	Y+27, r24	; 0x1b
	
	_delay_ms(20);
	dataDIR_LCD_DATA = 0xFF; // set data port as output
     578:	8a e3       	ldi	r24, 0x3A	; 58
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	2f ef       	ldi	r18, 0xFF	; 255
     57e:	fc 01       	movw	r30, r24
     580:	20 83       	st	Z, r18
	dataDIR_LCD_CTRL = 0xFF; //set (RS,RW,E) as outputs
     582:	87 e3       	ldi	r24, 0x37	; 55
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	2f ef       	ldi	r18, 0xFF	; 255
     588:	fc 01       	movw	r30, r24
     58a:	20 83       	st	Z, r18
	LCD_CTRL &=(~(1<<EN_switch | 1<<RW_switch | 1<<RS_switch)); //write , 
     58c:	88 e3       	ldi	r24, 0x38	; 56
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	28 e3       	ldi	r18, 0x38	; 56
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	f9 01       	movw	r30, r18
     596:	20 81       	ld	r18, Z
     598:	21 7f       	andi	r18, 0xF1	; 241
     59a:	fc 01       	movw	r30, r24
     59c:	20 83       	st	Z, r18
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	a0 e7       	ldi	r26, 0x70	; 112
     5a4:	b1 e4       	ldi	r27, 0x41	; 65
     5a6:	8d 83       	std	Y+5, r24	; 0x05
     5a8:	9e 83       	std	Y+6, r25	; 0x06
     5aa:	af 83       	std	Y+7, r26	; 0x07
     5ac:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	4a e7       	ldi	r20, 0x7A	; 122
     5b4:	53 e4       	ldi	r21, 0x43	; 67
     5b6:	6d 81       	ldd	r22, Y+5	; 0x05
     5b8:	7e 81       	ldd	r23, Y+6	; 0x06
     5ba:	8f 81       	ldd	r24, Y+7	; 0x07
     5bc:	98 85       	ldd	r25, Y+8	; 0x08
     5be:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	89 87       	std	Y+9, r24	; 0x09
     5c8:	9a 87       	std	Y+10, r25	; 0x0a
     5ca:	ab 87       	std	Y+11, r26	; 0x0b
     5cc:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e8       	ldi	r20, 0x80	; 128
     5d4:	5f e3       	ldi	r21, 0x3F	; 63
     5d6:	69 85       	ldd	r22, Y+9	; 0x09
     5d8:	7a 85       	ldd	r23, Y+10	; 0x0a
     5da:	8b 85       	ldd	r24, Y+11	; 0x0b
     5dc:	9c 85       	ldd	r25, Y+12	; 0x0c
     5de:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__cmpsf2>
     5e2:	88 23       	and	r24, r24
     5e4:	2c f4       	brge	.+10     	; 0x5f0 <LCD_init+0x170>
		__ticks = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	9e 87       	std	Y+14, r25	; 0x0e
     5ec:	8d 87       	std	Y+13, r24	; 0x0d
     5ee:	3f c0       	rjmp	.+126    	; 0x66e <LCD_init+0x1ee>
	else if (__tmp > 65535)
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	3f ef       	ldi	r19, 0xFF	; 255
     5f4:	4f e7       	ldi	r20, 0x7F	; 127
     5f6:	57 e4       	ldi	r21, 0x47	; 71
     5f8:	69 85       	ldd	r22, Y+9	; 0x09
     5fa:	7a 85       	ldd	r23, Y+10	; 0x0a
     5fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     5fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     600:	0e 94 2f 0a 	call	0x145e	; 0x145e <__gesf2>
     604:	18 16       	cp	r1, r24
     606:	4c f5       	brge	.+82     	; 0x65a <LCD_init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e2       	ldi	r20, 0x20	; 32
     60e:	51 e4       	ldi	r21, 0x41	; 65
     610:	6d 81       	ldd	r22, Y+5	; 0x05
     612:	7e 81       	ldd	r23, Y+6	; 0x06
     614:	8f 81       	ldd	r24, Y+7	; 0x07
     616:	98 85       	ldd	r25, Y+8	; 0x08
     618:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	9e 87       	std	Y+14, r25	; 0x0e
     62e:	8d 87       	std	Y+13, r24	; 0x0d
     630:	0f c0       	rjmp	.+30     	; 0x650 <LCD_init+0x1d0>
     632:	89 e1       	ldi	r24, 0x19	; 25
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	98 8b       	std	Y+16, r25	; 0x10
     638:	8f 87       	std	Y+15, r24	; 0x0f
     63a:	8f 85       	ldd	r24, Y+15	; 0x0f
     63c:	98 89       	ldd	r25, Y+16	; 0x10
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <LCD_init+0x1be>
     642:	98 8b       	std	Y+16, r25	; 0x10
     644:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     646:	8d 85       	ldd	r24, Y+13	; 0x0d
     648:	9e 85       	ldd	r25, Y+14	; 0x0e
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	9e 87       	std	Y+14, r25	; 0x0e
     64e:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     650:	8d 85       	ldd	r24, Y+13	; 0x0d
     652:	9e 85       	ldd	r25, Y+14	; 0x0e
     654:	89 2b       	or	r24, r25
     656:	69 f7       	brne	.-38     	; 0x632 <LCD_init+0x1b2>
     658:	14 c0       	rjmp	.+40     	; 0x682 <LCD_init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     65a:	69 85       	ldd	r22, Y+9	; 0x09
     65c:	7a 85       	ldd	r23, Y+10	; 0x0a
     65e:	8b 85       	ldd	r24, Y+11	; 0x0b
     660:	9c 85       	ldd	r25, Y+12	; 0x0c
     662:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     666:	dc 01       	movw	r26, r24
     668:	cb 01       	movw	r24, r22
     66a:	9e 87       	std	Y+14, r25	; 0x0e
     66c:	8d 87       	std	Y+13, r24	; 0x0d
     66e:	8d 85       	ldd	r24, Y+13	; 0x0d
     670:	9e 85       	ldd	r25, Y+14	; 0x0e
     672:	9a 8b       	std	Y+18, r25	; 0x12
     674:	89 8b       	std	Y+17, r24	; 0x11
     676:	89 89       	ldd	r24, Y+17	; 0x11
     678:	9a 89       	ldd	r25, Y+18	; 0x12
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <LCD_init+0x1fa>
     67e:	9a 8b       	std	Y+18, r25	; 0x12
     680:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(15);
	LCD_clear_screen();
     682:	0e 94 0e 05 	call	0xa1c	; 0xa1c <LCD_clear_screen>
	LCD_write_command(LCD_FUNCTION_8BIT_2LINES);
	
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_write_command(LCD_RETURN_HOME);
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_write_command>
	LCD_write_command(LCD_FUNCTION_4BIT_2LINES);
     68c:	88 e2       	ldi	r24, 0x28	; 40
     68e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_write_command>
	#endif
	
	LCD_write_command(LCD_ENTRY_MODE);
     692:	86 e0       	ldi	r24, 0x06	; 6
     694:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_write_command>
	LCD_write_command(LCD_BEGIN_AT_FIRST_ROW);
     698:	80 e8       	ldi	r24, 0x80	; 128
     69a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_write_command>
	LCD_write_command(LCD_DISP_ON_CURSOR_BLINK);
     69e:	8f e0       	ldi	r24, 0x0F	; 15
     6a0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_write_command>
	
	
}
     6a4:	00 00       	nop
     6a6:	6c 96       	adiw	r28, 0x1c	; 28
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <LCD_write_command>:

void LCD_write_command(unsigned char command)
{
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	1f 92       	push	r1
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	89 83       	std	Y+1, r24	; 0x01
	LCD_isbusy();
     6c4:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_isbusy>
	LCD_CTRL&=~(1<<RS_switch); //select command register
     6c8:	88 e3       	ldi	r24, 0x38	; 56
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	28 e3       	ldi	r18, 0x38	; 56
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	f9 01       	movw	r30, r18
     6d2:	20 81       	ld	r18, Z
     6d4:	2d 7f       	andi	r18, 0xFD	; 253
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 83       	st	Z, r18
	LCD_CTRL&=~(1<<RW_switch); //write
     6da:	88 e3       	ldi	r24, 0x38	; 56
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	28 e3       	ldi	r18, 0x38	; 56
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	f9 01       	movw	r30, r18
     6e4:	20 81       	ld	r18, Z
     6e6:	2b 7f       	andi	r18, 0xFB	; 251
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18
	#ifdef EIGHT_BIT_MODE
		LCD_DATA = command;
	#endif
	
	#ifdef FOUR_BIT_MODE
		LCD_DATA =((LCD_DATA & 0x0F) | (command & 0xF0));
     6ec:	8b e3       	ldi	r24, 0x3B	; 59
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	2b e3       	ldi	r18, 0x3B	; 59
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	f9 01       	movw	r30, r18
     6f6:	20 81       	ld	r18, Z
     6f8:	32 2f       	mov	r19, r18
     6fa:	3f 70       	andi	r19, 0x0F	; 15
     6fc:	29 81       	ldd	r18, Y+1	; 0x01
     6fe:	20 7f       	andi	r18, 0xF0	; 240
     700:	23 2b       	or	r18, r19
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
		LCD_EN_kick();
     706:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_EN_kick>
		LCD_DATA = ((LCD_DATA & 0x0F) | (command << 4));
     70a:	8b e3       	ldi	r24, 0x3B	; 59
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	2b e3       	ldi	r18, 0x3B	; 59
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	20 81       	ld	r18, Z
     716:	42 2f       	mov	r20, r18
     718:	4f 70       	andi	r20, 0x0F	; 15
     71a:	29 81       	ldd	r18, Y+1	; 0x01
     71c:	22 2f       	mov	r18, r18
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	22 95       	swap	r18
     722:	32 95       	swap	r19
     724:	30 7f       	andi	r19, 0xF0	; 240
     726:	32 27       	eor	r19, r18
     728:	20 7f       	andi	r18, 0xF0	; 240
     72a:	32 27       	eor	r19, r18
     72c:	24 2b       	or	r18, r20
     72e:	fc 01       	movw	r30, r24
     730:	20 83       	st	Z, r18
		LCD_EN_kick();
     732:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_EN_kick>
		LCD_CTRL &=  (~((1<<RW_switch) | (1<<RS_switch)));
     736:	88 e3       	ldi	r24, 0x38	; 56
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	28 e3       	ldi	r18, 0x38	; 56
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	29 7f       	andi	r18, 0xF9	; 249
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
	#endif
	
		LCD_EN_kick();
     748:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_EN_kick>
	
	
	
}
     74c:	00 00       	nop
     74e:	0f 90       	pop	r0
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <LCD_write_char>:

void LCD_write_char(unsigned char data)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	1f 92       	push	r1
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	89 83       	std	Y+1, r24	; 0x01
	LCD_isbusy();
     762:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_isbusy>
	LCD_CTRL|=(1<<RS_switch); //select data register
     766:	88 e3       	ldi	r24, 0x38	; 56
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	28 e3       	ldi	r18, 0x38	; 56
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	f9 01       	movw	r30, r18
     770:	20 81       	ld	r18, Z
     772:	22 60       	ori	r18, 0x02	; 2
     774:	fc 01       	movw	r30, r24
     776:	20 83       	st	Z, r18
	LCD_CTRL&=~(1<<RW_switch); //write 
     778:	88 e3       	ldi	r24, 0x38	; 56
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	28 e3       	ldi	r18, 0x38	; 56
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	f9 01       	movw	r30, r18
     782:	20 81       	ld	r18, Z
     784:	2b 7f       	andi	r18, 0xFB	; 251
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18
		LCD_DATA = data;
		
	#endif
		
	#ifdef FOUR_BIT_MODE
	LCD_DATA =((LCD_DATA & 0x0F) | (data & 0xF0));
     78a:	8b e3       	ldi	r24, 0x3B	; 59
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	2b e3       	ldi	r18, 0x3B	; 59
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	f9 01       	movw	r30, r18
     794:	20 81       	ld	r18, Z
     796:	32 2f       	mov	r19, r18
     798:	3f 70       	andi	r19, 0x0F	; 15
     79a:	29 81       	ldd	r18, Y+1	; 0x01
     79c:	20 7f       	andi	r18, 0xF0	; 240
     79e:	23 2b       	or	r18, r19
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
	LCD_EN_kick();
     7a4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_EN_kick>
	LCD_DATA = ((LCD_DATA & 0x0F) | (data << 4));
     7a8:	8b e3       	ldi	r24, 0x3B	; 59
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	2b e3       	ldi	r18, 0x3B	; 59
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	42 2f       	mov	r20, r18
     7b6:	4f 70       	andi	r20, 0x0F	; 15
     7b8:	29 81       	ldd	r18, Y+1	; 0x01
     7ba:	22 2f       	mov	r18, r18
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	22 95       	swap	r18
     7c0:	32 95       	swap	r19
     7c2:	30 7f       	andi	r19, 0xF0	; 240
     7c4:	32 27       	eor	r19, r18
     7c6:	20 7f       	andi	r18, 0xF0	; 240
     7c8:	32 27       	eor	r19, r18
     7ca:	24 2b       	or	r18, r20
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18
	LCD_EN_kick();
     7d0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_EN_kick>
	#endif
	
	LCD_EN_kick();
     7d4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_EN_kick>
	
}
     7d8:	00 00       	nop
     7da:	0f 90       	pop	r0
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <LCD_write_string>:

void LCD_write_string(char* data)
{
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <LCD_write_string+0x6>
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <LCD_write_string+0x8>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	9c 83       	std	Y+4, r25	; 0x04
     7f0:	8b 83       	std	Y+3, r24	; 0x03
	int counter =0;
     7f2:	1a 82       	std	Y+2, r1	; 0x02
     7f4:	19 82       	std	Y+1, r1	; 0x01
	while(*data > 0)
     7f6:	25 c0       	rjmp	.+74     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	{
		counter++;
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	9a 83       	std	Y+2, r25	; 0x02
     800:	89 83       	std	Y+1, r24	; 0x01
		LCD_write_char(*data++);
     802:	8b 81       	ldd	r24, Y+3	; 0x03
     804:	9c 81       	ldd	r25, Y+4	; 0x04
     806:	9c 01       	movw	r18, r24
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
     80c:	3c 83       	std	Y+4, r19	; 0x04
     80e:	2b 83       	std	Y+3, r18	; 0x03
     810:	fc 01       	movw	r30, r24
     812:	80 81       	ld	r24, Z
     814:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_write_char>
		if(counter == 16)
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	9a 81       	ldd	r25, Y+2	; 0x02
     81c:	40 97       	sbiw	r24, 0x10	; 16
     81e:	29 f4       	brne	.+10     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
			LCD_Cursor_XY(1,0);
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_Cursor_XY>
     828:	0c c0       	rjmp	.+24     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		else if(counter == 32)
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	9a 81       	ldd	r25, Y+2	; 0x02
     82e:	80 97       	sbiw	r24, 0x20	; 32
     830:	41 f4       	brne	.+16     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		{
			LCD_clear_screen();
     832:	0e 94 0e 05 	call	0xa1c	; 0xa1c <LCD_clear_screen>
			LCD_Cursor_XY(0,0);
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_Cursor_XY>
			counter = 0;
     83e:	1a 82       	std	Y+2, r1	; 0x02
     840:	19 82       	std	Y+1, r1	; 0x01
}

void LCD_write_string(char* data)
{
	int counter =0;
	while(*data > 0)
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	9c 81       	ldd	r25, Y+4	; 0x04
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	88 23       	and	r24, r24
     84c:	a9 f6       	brne	.-86     	; 0x7f8 <LCD_write_string+0x16>
			LCD_Cursor_XY(0,0);
			counter = 0;
		}
	}
	
}
     84e:	00 00       	nop
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <LCD_Cursor_XY>:

void LCD_Cursor_XY(unsigned char line, unsigned char col)
{
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	00 d0       	rcall	.+0      	; 0x864 <__stack+0x5>
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	89 83       	std	Y+1, r24	; 0x01
     86a:	6a 83       	std	Y+2, r22	; 0x02
	if(line==0)
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	88 23       	and	r24, r24
     870:	41 f4       	brne	.+16     	; 0x882 <__stack+0x23>
	{
		if(col < 16 && col >= 0)
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	80 31       	cpi	r24, 0x10	; 16
     876:	78 f4       	brcc	.+30     	; 0x896 <__stack+0x37>
			LCD_write_command(LCD_BEGIN_AT_FIRST_ROW + col);
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	80 58       	subi	r24, 0x80	; 128
     87c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_write_command>
	else if(line ==1)
	{
		if(col < 16 && col >= 0)
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW + col);
	}
}
     880:	0a c0       	rjmp	.+20     	; 0x896 <__stack+0x37>
	{
		if(col < 16 && col >= 0)
			LCD_write_command(LCD_BEGIN_AT_FIRST_ROW + col);
			
	}
	else if(line ==1)
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	39 f4       	brne	.+14     	; 0x896 <__stack+0x37>
	{
		if(col < 16 && col >= 0)
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	80 31       	cpi	r24, 0x10	; 16
     88c:	20 f4       	brcc	.+8      	; 0x896 <__stack+0x37>
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW + col);
     88e:	8a 81       	ldd	r24, Y+2	; 0x02
     890:	80 54       	subi	r24, 0x40	; 64
     892:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_write_command>
	}
}
     896:	00 00       	nop
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <LCD_EN_kick>:

void LCD_EN_kick()
{
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	2e 97       	sbiw	r28, 0x0e	; 14
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
	LCD_CTRL &= ~(1<<EN_switch);
     8b6:	88 e3       	ldi	r24, 0x38	; 56
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	28 e3       	ldi	r18, 0x38	; 56
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	f9 01       	movw	r30, r18
     8c0:	20 81       	ld	r18, Z
     8c2:	27 7f       	andi	r18, 0xF7	; 247
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 83       	st	Z, r18
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	a0 ef       	ldi	r26, 0xF0	; 240
     8ce:	b1 e4       	ldi	r27, 0x41	; 65
     8d0:	89 83       	std	Y+1, r24	; 0x01
     8d2:	9a 83       	std	Y+2, r25	; 0x02
     8d4:	ab 83       	std	Y+3, r26	; 0x03
     8d6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	4a e7       	ldi	r20, 0x7A	; 122
     8de:	53 e4       	ldi	r21, 0x43	; 67
     8e0:	69 81       	ldd	r22, Y+1	; 0x01
     8e2:	7a 81       	ldd	r23, Y+2	; 0x02
     8e4:	8b 81       	ldd	r24, Y+3	; 0x03
     8e6:	9c 81       	ldd	r25, Y+4	; 0x04
     8e8:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     8ec:	dc 01       	movw	r26, r24
     8ee:	cb 01       	movw	r24, r22
     8f0:	8d 83       	std	Y+5, r24	; 0x05
     8f2:	9e 83       	std	Y+6, r25	; 0x06
     8f4:	af 83       	std	Y+7, r26	; 0x07
     8f6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	40 e8       	ldi	r20, 0x80	; 128
     8fe:	5f e3       	ldi	r21, 0x3F	; 63
     900:	6d 81       	ldd	r22, Y+5	; 0x05
     902:	7e 81       	ldd	r23, Y+6	; 0x06
     904:	8f 81       	ldd	r24, Y+7	; 0x07
     906:	98 85       	ldd	r25, Y+8	; 0x08
     908:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__cmpsf2>
     90c:	88 23       	and	r24, r24
     90e:	2c f4       	brge	.+10     	; 0x91a <LCD_EN_kick+0x78>
		__ticks = 1;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	9a 87       	std	Y+10, r25	; 0x0a
     916:	89 87       	std	Y+9, r24	; 0x09
     918:	3f c0       	rjmp	.+126    	; 0x998 <LCD_EN_kick+0xf6>
	else if (__tmp > 65535)
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	3f ef       	ldi	r19, 0xFF	; 255
     91e:	4f e7       	ldi	r20, 0x7F	; 127
     920:	57 e4       	ldi	r21, 0x47	; 71
     922:	6d 81       	ldd	r22, Y+5	; 0x05
     924:	7e 81       	ldd	r23, Y+6	; 0x06
     926:	8f 81       	ldd	r24, Y+7	; 0x07
     928:	98 85       	ldd	r25, Y+8	; 0x08
     92a:	0e 94 2f 0a 	call	0x145e	; 0x145e <__gesf2>
     92e:	18 16       	cp	r1, r24
     930:	4c f5       	brge	.+82     	; 0x984 <LCD_EN_kick+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e2       	ldi	r20, 0x20	; 32
     938:	51 e4       	ldi	r21, 0x41	; 65
     93a:	69 81       	ldd	r22, Y+1	; 0x01
     93c:	7a 81       	ldd	r23, Y+2	; 0x02
     93e:	8b 81       	ldd	r24, Y+3	; 0x03
     940:	9c 81       	ldd	r25, Y+4	; 0x04
     942:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	bc 01       	movw	r22, r24
     94c:	cd 01       	movw	r24, r26
     94e:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     952:	dc 01       	movw	r26, r24
     954:	cb 01       	movw	r24, r22
     956:	9a 87       	std	Y+10, r25	; 0x0a
     958:	89 87       	std	Y+9, r24	; 0x09
     95a:	0f c0       	rjmp	.+30     	; 0x97a <LCD_EN_kick+0xd8>
     95c:	89 e1       	ldi	r24, 0x19	; 25
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	9c 87       	std	Y+12, r25	; 0x0c
     962:	8b 87       	std	Y+11, r24	; 0x0b
     964:	8b 85       	ldd	r24, Y+11	; 0x0b
     966:	9c 85       	ldd	r25, Y+12	; 0x0c
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <LCD_EN_kick+0xc6>
     96c:	9c 87       	std	Y+12, r25	; 0x0c
     96e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     970:	89 85       	ldd	r24, Y+9	; 0x09
     972:	9a 85       	ldd	r25, Y+10	; 0x0a
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	9a 87       	std	Y+10, r25	; 0x0a
     978:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     97a:	89 85       	ldd	r24, Y+9	; 0x09
     97c:	9a 85       	ldd	r25, Y+10	; 0x0a
     97e:	89 2b       	or	r24, r25
     980:	69 f7       	brne	.-38     	; 0x95c <LCD_EN_kick+0xba>
     982:	14 c0       	rjmp	.+40     	; 0x9ac <LCD_EN_kick+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     984:	6d 81       	ldd	r22, Y+5	; 0x05
     986:	7e 81       	ldd	r23, Y+6	; 0x06
     988:	8f 81       	ldd	r24, Y+7	; 0x07
     98a:	98 85       	ldd	r25, Y+8	; 0x08
     98c:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     990:	dc 01       	movw	r26, r24
     992:	cb 01       	movw	r24, r22
     994:	9a 87       	std	Y+10, r25	; 0x0a
     996:	89 87       	std	Y+9, r24	; 0x09
     998:	89 85       	ldd	r24, Y+9	; 0x09
     99a:	9a 85       	ldd	r25, Y+10	; 0x0a
     99c:	9e 87       	std	Y+14, r25	; 0x0e
     99e:	8d 87       	std	Y+13, r24	; 0x0d
     9a0:	8d 85       	ldd	r24, Y+13	; 0x0d
     9a2:	9e 85       	ldd	r25, Y+14	; 0x0e
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <LCD_EN_kick+0x102>
     9a8:	9e 87       	std	Y+14, r25	; 0x0e
     9aa:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(30);
	LCD_CTRL |= (1<<EN_switch);
     9ac:	88 e3       	ldi	r24, 0x38	; 56
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	28 e3       	ldi	r18, 0x38	; 56
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	f9 01       	movw	r30, r18
     9b6:	20 81       	ld	r18, Z
     9b8:	28 60       	ori	r18, 0x08	; 8
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
}
     9be:	00 00       	nop
     9c0:	2e 96       	adiw	r28, 0x0e	; 14
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <LCD_isbusy>:

void LCD_isbusy(void)
{
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
	dataDIR_LCD_DATA = 0; //set data port as input
     9da:	8a e3       	ldi	r24, 0x3A	; 58
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	10 82       	st	Z, r1
	//make DB7 as busy flag
	LCD_CTRL |= (1<<RW_switch); 
     9e2:	88 e3       	ldi	r24, 0x38	; 56
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	28 e3       	ldi	r18, 0x38	; 56
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	f9 01       	movw	r30, r18
     9ec:	20 81       	ld	r18, Z
     9ee:	24 60       	ori	r18, 0x04	; 4
     9f0:	fc 01       	movw	r30, r24
     9f2:	20 83       	st	Z, r18
	LCD_CTRL &= ~(1<<RS_switch);
     9f4:	88 e3       	ldi	r24, 0x38	; 56
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	28 e3       	ldi	r18, 0x38	; 56
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	f9 01       	movw	r30, r18
     9fe:	20 81       	ld	r18, Z
     a00:	2d 7f       	andi	r18, 0xFD	; 253
     a02:	fc 01       	movw	r30, r24
     a04:	20 83       	st	Z, r18
	LCD_EN_kick();
     a06:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_EN_kick>
	#ifdef EIGHT_BIT_MODE
 		dataDIR_LCD_DATA = 0xFF; // set data port as output
	#endif
	
	#ifdef FOUR_BIT_MODE
		dataDIR_LCD_DATA = 0xF0;// set data port as output
     a0a:	8a e3       	ldi	r24, 0x3A	; 58
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	20 ef       	ldi	r18, 0xF0	; 240
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
	#endif

}
     a14:	00 00       	nop
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <LCD_clear_screen>:

void LCD_clear_screen()
{
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
	LCD_write_command(LCD_CLEAR_SCREEN);
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_write_command>
	
}
     a2a:	00 00       	nop
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <LCD_display_intNum>:

void LCD_display_intNum(int num)
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	2c 97       	sbiw	r28, 0x0c	; 12
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	9c 87       	std	Y+12, r25	; 0x0c
     a48:	8b 87       	std	Y+11, r24	; 0x0b
	char str[10];
	sprintf(str,"%d",num);
     a4a:	8c 85       	ldd	r24, Y+12	; 0x0c
     a4c:	8f 93       	push	r24
     a4e:	8b 85       	ldd	r24, Y+11	; 0x0b
     a50:	8f 93       	push	r24
     a52:	80 e7       	ldi	r24, 0x70	; 112
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	89 2f       	mov	r24, r25
     a58:	8f 93       	push	r24
     a5a:	80 e7       	ldi	r24, 0x70	; 112
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	8f 93       	push	r24
     a60:	ce 01       	movw	r24, r28
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	9f 93       	push	r25
     a66:	8f 93       	push	r24
     a68:	0e 94 a1 0a 	call	0x1542	; 0x1542 <sprintf>
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
	LCD_write_string(str);
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_write_string>
}
     a80:	00 00       	nop
     a82:	2c 96       	adiw	r28, 0x0c	; 12
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <LCD_display_realNum>:

void LCD_display_realNum(double num)
{
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	a2 97       	sbiw	r28, 0x22	; 34
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	6f 8f       	std	Y+31, r22	; 0x1f
     aaa:	78 a3       	std	Y+32, r23	; 0x20
     aac:	89 a3       	std	Y+33, r24	; 0x21
     aae:	9a a3       	std	Y+34, r25	; 0x22
	char str[16];
	char*tempSign=(num<0)? "-": "";
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	a9 01       	movw	r20, r18
     ab6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ab8:	78 a1       	ldd	r23, Y+32	; 0x20
     aba:	89 a1       	ldd	r24, Y+33	; 0x21
     abc:	9a a1       	ldd	r25, Y+34	; 0x22
     abe:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__cmpsf2>
     ac2:	88 23       	and	r24, r24
     ac4:	1c f4       	brge	.+6      	; 0xacc <LCD_display_realNum+0x38>
     ac6:	83 e7       	ldi	r24, 0x73	; 115
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <LCD_display_realNum+0x3c>
     acc:	85 e7       	ldi	r24, 0x75	; 117
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	9a 83       	std	Y+2, r25	; 0x02
     ad2:	89 83       	std	Y+1, r24	; 0x01
	float tempVal=(num<0)?-num: num;
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	a9 01       	movw	r20, r18
     ada:	6f 8d       	ldd	r22, Y+31	; 0x1f
     adc:	78 a1       	ldd	r23, Y+32	; 0x20
     ade:	89 a1       	ldd	r24, Y+33	; 0x21
     ae0:	9a a1       	ldd	r25, Y+34	; 0x22
     ae2:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__cmpsf2>
     ae6:	88 23       	and	r24, r24
     ae8:	34 f4       	brge	.+12     	; 0xaf6 <LCD_display_realNum+0x62>
     aea:	8f 8d       	ldd	r24, Y+31	; 0x1f
     aec:	98 a1       	ldd	r25, Y+32	; 0x20
     aee:	a9 a1       	ldd	r26, Y+33	; 0x21
     af0:	ba a1       	ldd	r27, Y+34	; 0x22
     af2:	b0 58       	subi	r27, 0x80	; 128
     af4:	04 c0       	rjmp	.+8      	; 0xafe <LCD_display_realNum+0x6a>
     af6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     af8:	98 a1       	ldd	r25, Y+32	; 0x20
     afa:	a9 a1       	ldd	r26, Y+33	; 0x21
     afc:	ba a1       	ldd	r27, Y+34	; 0x22
     afe:	8b 83       	std	Y+3, r24	; 0x03
     b00:	9c 83       	std	Y+4, r25	; 0x04
     b02:	ad 83       	std	Y+5, r26	; 0x05
     b04:	be 83       	std	Y+6, r27	; 0x06
	int tempInt1=tempVal;
     b06:	6b 81       	ldd	r22, Y+3	; 0x03
     b08:	7c 81       	ldd	r23, Y+4	; 0x04
     b0a:	8d 81       	ldd	r24, Y+5	; 0x05
     b0c:	9e 81       	ldd	r25, Y+6	; 0x06
     b0e:	0e 94 47 09 	call	0x128e	; 0x128e <__fixsfsi>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	98 87       	std	Y+8, r25	; 0x08
     b18:	8f 83       	std	Y+7, r24	; 0x07
	float tempFrac=tempVal-tempInt1;
     b1a:	8f 81       	ldd	r24, Y+7	; 0x07
     b1c:	98 85       	ldd	r25, Y+8	; 0x08
     b1e:	09 2e       	mov	r0, r25
     b20:	00 0c       	add	r0, r0
     b22:	aa 0b       	sbc	r26, r26
     b24:	bb 0b       	sbc	r27, r27
     b26:	bc 01       	movw	r22, r24
     b28:	cd 01       	movw	r24, r26
     b2a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__floatsisf>
     b2e:	dc 01       	movw	r26, r24
     b30:	cb 01       	movw	r24, r22
     b32:	9c 01       	movw	r18, r24
     b34:	ad 01       	movw	r20, r26
     b36:	6b 81       	ldd	r22, Y+3	; 0x03
     b38:	7c 81       	ldd	r23, Y+4	; 0x04
     b3a:	8d 81       	ldd	r24, Y+5	; 0x05
     b3c:	9e 81       	ldd	r25, Y+6	; 0x06
     b3e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__subsf3>
     b42:	dc 01       	movw	r26, r24
     b44:	cb 01       	movw	r24, r22
     b46:	89 87       	std	Y+9, r24	; 0x09
     b48:	9a 87       	std	Y+10, r25	; 0x0a
     b4a:	ab 87       	std	Y+11, r26	; 0x0b
     b4c:	bc 87       	std	Y+12, r27	; 0x0c
	int tempInt2=tempFrac*10000;
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e4       	ldi	r19, 0x40	; 64
     b52:	4c e1       	ldi	r20, 0x1C	; 28
     b54:	56 e4       	ldi	r21, 0x46	; 70
     b56:	69 85       	ldd	r22, Y+9	; 0x09
     b58:	7a 85       	ldd	r23, Y+10	; 0x0a
     b5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b5e:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	bc 01       	movw	r22, r24
     b68:	cd 01       	movw	r24, r26
     b6a:	0e 94 47 09 	call	0x128e	; 0x128e <__fixsfsi>
     b6e:	dc 01       	movw	r26, r24
     b70:	cb 01       	movw	r24, r22
     b72:	9e 87       	std	Y+14, r25	; 0x0e
     b74:	8d 87       	std	Y+13, r24	; 0x0d
	sprintf(str,"%s%d.%04d",tempSign,tempInt1,tempInt2);
     b76:	8e 85       	ldd	r24, Y+14	; 0x0e
     b78:	8f 93       	push	r24
     b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7c:	8f 93       	push	r24
     b7e:	88 85       	ldd	r24, Y+8	; 0x08
     b80:	8f 93       	push	r24
     b82:	8f 81       	ldd	r24, Y+7	; 0x07
     b84:	8f 93       	push	r24
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	8f 93       	push	r24
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	8f 93       	push	r24
     b8e:	86 e7       	ldi	r24, 0x76	; 118
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	89 2f       	mov	r24, r25
     b94:	8f 93       	push	r24
     b96:	86 e7       	ldi	r24, 0x76	; 118
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	8f 93       	push	r24
     b9c:	ce 01       	movw	r24, r28
     b9e:	0f 96       	adiw	r24, 0x0f	; 15
     ba0:	29 2f       	mov	r18, r25
     ba2:	2f 93       	push	r18
     ba4:	8f 93       	push	r24
     ba6:	0e 94 a1 0a 	call	0x1542	; 0x1542 <sprintf>
     baa:	8d b7       	in	r24, 0x3d	; 61
     bac:	9e b7       	in	r25, 0x3e	; 62
     bae:	0a 96       	adiw	r24, 0x0a	; 10
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
	
	LCD_write_string(str);
     bba:	ce 01       	movw	r24, r28
     bbc:	0f 96       	adiw	r24, 0x0f	; 15
     bbe:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_write_string>
}
     bc2:	00 00       	nop
     bc4:	a2 96       	adiw	r28, 0x22	; 34
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <main>:

#include "lcd_driver/lcd.h"
#include "keypad_driver/keypad.h"

int main(void)
{
     bd6:	cf 92       	push	r12
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	ec 97       	sbiw	r28, 0x3c	; 60
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     bf6:	0e 94 40 02 	call	0x480	; 0x480 <LCD_init>
	KEYPAD_INIT();
     bfa:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_INIT>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	a8 e4       	ldi	r26, 0x48	; 72
     c04:	b2 e4       	ldi	r27, 0x42	; 66
     c06:	8b 8b       	std	Y+19, r24	; 0x13
     c08:	9c 8b       	std	Y+20, r25	; 0x14
     c0a:	ad 8b       	std	Y+21, r26	; 0x15
     c0c:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	4a e7       	ldi	r20, 0x7A	; 122
     c14:	53 e4       	ldi	r21, 0x43	; 67
     c16:	6b 89       	ldd	r22, Y+19	; 0x13
     c18:	7c 89       	ldd	r23, Y+20	; 0x14
     c1a:	8d 89       	ldd	r24, Y+21	; 0x15
     c1c:	9e 89       	ldd	r25, Y+22	; 0x16
     c1e:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	8b ab       	std	Y+51, r24	; 0x33
     c28:	9c ab       	std	Y+52, r25	; 0x34
     c2a:	ad ab       	std	Y+53, r26	; 0x35
     c2c:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e8       	ldi	r20, 0x80	; 128
     c34:	5f e3       	ldi	r21, 0x3F	; 63
     c36:	6b a9       	ldd	r22, Y+51	; 0x33
     c38:	7c a9       	ldd	r23, Y+52	; 0x34
     c3a:	8d a9       	ldd	r24, Y+53	; 0x35
     c3c:	9e a9       	ldd	r25, Y+54	; 0x36
     c3e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__cmpsf2>
     c42:	88 23       	and	r24, r24
     c44:	2c f4       	brge	.+10     	; 0xc50 <main+0x7a>
		__ticks = 1;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	98 af       	std	Y+56, r25	; 0x38
     c4c:	8f ab       	std	Y+55, r24	; 0x37
     c4e:	3f c0       	rjmp	.+126    	; 0xcce <main+0xf8>
	else if (__tmp > 65535)
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	3f ef       	ldi	r19, 0xFF	; 255
     c54:	4f e7       	ldi	r20, 0x7F	; 127
     c56:	57 e4       	ldi	r21, 0x47	; 71
     c58:	6b a9       	ldd	r22, Y+51	; 0x33
     c5a:	7c a9       	ldd	r23, Y+52	; 0x34
     c5c:	8d a9       	ldd	r24, Y+53	; 0x35
     c5e:	9e a9       	ldd	r25, Y+54	; 0x36
     c60:	0e 94 2f 0a 	call	0x145e	; 0x145e <__gesf2>
     c64:	18 16       	cp	r1, r24
     c66:	4c f5       	brge	.+82     	; 0xcba <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e2       	ldi	r20, 0x20	; 32
     c6e:	51 e4       	ldi	r21, 0x41	; 65
     c70:	6b 89       	ldd	r22, Y+19	; 0x13
     c72:	7c 89       	ldd	r23, Y+20	; 0x14
     c74:	8d 89       	ldd	r24, Y+21	; 0x15
     c76:	9e 89       	ldd	r25, Y+22	; 0x16
     c78:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	bc 01       	movw	r22, r24
     c82:	cd 01       	movw	r24, r26
     c84:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	98 af       	std	Y+56, r25	; 0x38
     c8e:	8f ab       	std	Y+55, r24	; 0x37
     c90:	0f c0       	rjmp	.+30     	; 0xcb0 <main+0xda>
     c92:	89 e1       	ldi	r24, 0x19	; 25
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	9a af       	std	Y+58, r25	; 0x3a
     c98:	89 af       	std	Y+57, r24	; 0x39
     c9a:	89 ad       	ldd	r24, Y+57	; 0x39
     c9c:	9a ad       	ldd	r25, Y+58	; 0x3a
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <main+0xc8>
     ca2:	9a af       	std	Y+58, r25	; 0x3a
     ca4:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca6:	8f a9       	ldd	r24, Y+55	; 0x37
     ca8:	98 ad       	ldd	r25, Y+56	; 0x38
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	98 af       	std	Y+56, r25	; 0x38
     cae:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb0:	8f a9       	ldd	r24, Y+55	; 0x37
     cb2:	98 ad       	ldd	r25, Y+56	; 0x38
     cb4:	89 2b       	or	r24, r25
     cb6:	69 f7       	brne	.-38     	; 0xc92 <main+0xbc>
     cb8:	14 c0       	rjmp	.+40     	; 0xce2 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cba:	6b a9       	ldd	r22, Y+51	; 0x33
     cbc:	7c a9       	ldd	r23, Y+52	; 0x34
     cbe:	8d a9       	ldd	r24, Y+53	; 0x35
     cc0:	9e a9       	ldd	r25, Y+54	; 0x36
     cc2:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	98 af       	std	Y+56, r25	; 0x38
     ccc:	8f ab       	std	Y+55, r24	; 0x37
     cce:	8f a9       	ldd	r24, Y+55	; 0x37
     cd0:	98 ad       	ldd	r25, Y+56	; 0x38
     cd2:	9c af       	std	Y+60, r25	; 0x3c
     cd4:	8b af       	std	Y+59, r24	; 0x3b
     cd6:	8b ad       	ldd	r24, Y+59	; 0x3b
     cd8:	9c ad       	ldd	r25, Y+60	; 0x3c
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <main+0x104>
     cde:	9c af       	std	Y+60, r25	; 0x3c
     ce0:	8b af       	std	Y+59, r24	; 0x3b
	_delay_ms(50);
	char pressed_key=0,second_pressed_key=0,op='$';
     ce2:	19 82       	std	Y+1, r1	; 0x01
     ce4:	1e 86       	std	Y+14, r1	; 0x0e
     ce6:	84 e2       	ldi	r24, 0x24	; 36
     ce8:	8a 83       	std	Y+2, r24	; 0x02
	float res=0,val1=0,val2=0,i;
     cea:	1f 86       	std	Y+15, r1	; 0x0f
     cec:	18 8a       	std	Y+16, r1	; 0x10
     cee:	19 8a       	std	Y+17, r1	; 0x11
     cf0:	1a 8a       	std	Y+18, r1	; 0x12
     cf2:	1b 82       	std	Y+3, r1	; 0x03
     cf4:	1c 82       	std	Y+4, r1	; 0x04
     cf6:	1d 82       	std	Y+5, r1	; 0x05
     cf8:	1e 82       	std	Y+6, r1	; 0x06
     cfa:	1f 82       	std	Y+7, r1	; 0x07
     cfc:	18 86       	std	Y+8, r1	; 0x08
     cfe:	19 86       	std	Y+9, r1	; 0x09
     d00:	1a 86       	std	Y+10, r1	; 0x0a
	LCD_write_string("Hello, I'm Nada Shaaban");
     d02:	80 e8       	ldi	r24, 0x80	; 128
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_write_string>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	a6 e9       	ldi	r26, 0x96	; 150
     d10:	b3 e4       	ldi	r27, 0x43	; 67
     d12:	8f 8b       	std	Y+23, r24	; 0x17
     d14:	98 8f       	std	Y+24, r25	; 0x18
     d16:	a9 8f       	std	Y+25, r26	; 0x19
     d18:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	4a e7       	ldi	r20, 0x7A	; 122
     d20:	53 e4       	ldi	r21, 0x43	; 67
     d22:	6f 89       	ldd	r22, Y+23	; 0x17
     d24:	78 8d       	ldd	r23, Y+24	; 0x18
     d26:	89 8d       	ldd	r24, Y+25	; 0x19
     d28:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d2a:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	89 a7       	std	Y+41, r24	; 0x29
     d34:	9a a7       	std	Y+42, r25	; 0x2a
     d36:	ab a7       	std	Y+43, r26	; 0x2b
     d38:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e8       	ldi	r20, 0x80	; 128
     d40:	5f e3       	ldi	r21, 0x3F	; 63
     d42:	69 a5       	ldd	r22, Y+41	; 0x29
     d44:	7a a5       	ldd	r23, Y+42	; 0x2a
     d46:	8b a5       	ldd	r24, Y+43	; 0x2b
     d48:	9c a5       	ldd	r25, Y+44	; 0x2c
     d4a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__cmpsf2>
     d4e:	88 23       	and	r24, r24
     d50:	2c f4       	brge	.+10     	; 0xd5c <main+0x186>
		__ticks = 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9e a7       	std	Y+46, r25	; 0x2e
     d58:	8d a7       	std	Y+45, r24	; 0x2d
     d5a:	3f c0       	rjmp	.+126    	; 0xdda <main+0x204>
	else if (__tmp > 65535)
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	3f ef       	ldi	r19, 0xFF	; 255
     d60:	4f e7       	ldi	r20, 0x7F	; 127
     d62:	57 e4       	ldi	r21, 0x47	; 71
     d64:	69 a5       	ldd	r22, Y+41	; 0x29
     d66:	7a a5       	ldd	r23, Y+42	; 0x2a
     d68:	8b a5       	ldd	r24, Y+43	; 0x2b
     d6a:	9c a5       	ldd	r25, Y+44	; 0x2c
     d6c:	0e 94 2f 0a 	call	0x145e	; 0x145e <__gesf2>
     d70:	18 16       	cp	r1, r24
     d72:	4c f5       	brge	.+82     	; 0xdc6 <main+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e2       	ldi	r20, 0x20	; 32
     d7a:	51 e4       	ldi	r21, 0x41	; 65
     d7c:	6f 89       	ldd	r22, Y+23	; 0x17
     d7e:	78 8d       	ldd	r23, Y+24	; 0x18
     d80:	89 8d       	ldd	r24, Y+25	; 0x19
     d82:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d84:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9e a7       	std	Y+46, r25	; 0x2e
     d9a:	8d a7       	std	Y+45, r24	; 0x2d
     d9c:	0f c0       	rjmp	.+30     	; 0xdbc <main+0x1e6>
     d9e:	89 e1       	ldi	r24, 0x19	; 25
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	98 ab       	std	Y+48, r25	; 0x30
     da4:	8f a7       	std	Y+47, r24	; 0x2f
     da6:	8f a5       	ldd	r24, Y+47	; 0x2f
     da8:	98 a9       	ldd	r25, Y+48	; 0x30
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <main+0x1d4>
     dae:	98 ab       	std	Y+48, r25	; 0x30
     db0:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db2:	8d a5       	ldd	r24, Y+45	; 0x2d
     db4:	9e a5       	ldd	r25, Y+46	; 0x2e
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	9e a7       	std	Y+46, r25	; 0x2e
     dba:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dbc:	8d a5       	ldd	r24, Y+45	; 0x2d
     dbe:	9e a5       	ldd	r25, Y+46	; 0x2e
     dc0:	89 2b       	or	r24, r25
     dc2:	69 f7       	brne	.-38     	; 0xd9e <main+0x1c8>
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <main+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc6:	69 a5       	ldd	r22, Y+41	; 0x29
     dc8:	7a a5       	ldd	r23, Y+42	; 0x2a
     dca:	8b a5       	ldd	r24, Y+43	; 0x2b
     dcc:	9c a5       	ldd	r25, Y+44	; 0x2c
     dce:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9e a7       	std	Y+46, r25	; 0x2e
     dd8:	8d a7       	std	Y+45, r24	; 0x2d
     dda:	8d a5       	ldd	r24, Y+45	; 0x2d
     ddc:	9e a5       	ldd	r25, Y+46	; 0x2e
     dde:	9a ab       	std	Y+50, r25	; 0x32
     de0:	89 ab       	std	Y+49, r24	; 0x31
     de2:	89 a9       	ldd	r24, Y+49	; 0x31
     de4:	9a a9       	ldd	r25, Y+50	; 0x32
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <main+0x210>
     dea:	9a ab       	std	Y+50, r25	; 0x32
     dec:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(300);
	LCD_clear_screen();
     dee:	0e 94 0e 05 	call	0xa1c	; 0xa1c <LCD_clear_screen>
	LCD_write_string("Calculator Project:");
     df2:	88 e9       	ldi	r24, 0x98	; 152
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_write_string>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a6 e9       	ldi	r26, 0x96	; 150
     e00:	b3 e4       	ldi	r27, 0x43	; 67
     e02:	8b 8f       	std	Y+27, r24	; 0x1b
     e04:	9c 8f       	std	Y+28, r25	; 0x1c
     e06:	ad 8f       	std	Y+29, r26	; 0x1d
     e08:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	4a e7       	ldi	r20, 0x7A	; 122
     e10:	53 e4       	ldi	r21, 0x43	; 67
     e12:	6b 8d       	ldd	r22, Y+27	; 0x1b
     e14:	7c 8d       	ldd	r23, Y+28	; 0x1c
     e16:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e18:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e1a:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	8f 8f       	std	Y+31, r24	; 0x1f
     e24:	98 a3       	std	Y+32, r25	; 0x20
     e26:	a9 a3       	std	Y+33, r26	; 0x21
     e28:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e8       	ldi	r20, 0x80	; 128
     e30:	5f e3       	ldi	r21, 0x3F	; 63
     e32:	6f 8d       	ldd	r22, Y+31	; 0x1f
     e34:	78 a1       	ldd	r23, Y+32	; 0x20
     e36:	89 a1       	ldd	r24, Y+33	; 0x21
     e38:	9a a1       	ldd	r25, Y+34	; 0x22
     e3a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__cmpsf2>
     e3e:	88 23       	and	r24, r24
     e40:	2c f4       	brge	.+10     	; 0xe4c <main+0x276>
		__ticks = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9c a3       	std	Y+36, r25	; 0x24
     e48:	8b a3       	std	Y+35, r24	; 0x23
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <main+0x2f4>
	else if (__tmp > 65535)
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	3f ef       	ldi	r19, 0xFF	; 255
     e50:	4f e7       	ldi	r20, 0x7F	; 127
     e52:	57 e4       	ldi	r21, 0x47	; 71
     e54:	6f 8d       	ldd	r22, Y+31	; 0x1f
     e56:	78 a1       	ldd	r23, Y+32	; 0x20
     e58:	89 a1       	ldd	r24, Y+33	; 0x21
     e5a:	9a a1       	ldd	r25, Y+34	; 0x22
     e5c:	0e 94 2f 0a 	call	0x145e	; 0x145e <__gesf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f5       	brge	.+82     	; 0xeb6 <main+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e2       	ldi	r20, 0x20	; 32
     e6a:	51 e4       	ldi	r21, 0x41	; 65
     e6c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     e6e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     e70:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e72:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e74:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9c a3       	std	Y+36, r25	; 0x24
     e8a:	8b a3       	std	Y+35, r24	; 0x23
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <main+0x2d6>
     e8e:	89 e1       	ldi	r24, 0x19	; 25
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9e a3       	std	Y+38, r25	; 0x26
     e94:	8d a3       	std	Y+37, r24	; 0x25
     e96:	8d a1       	ldd	r24, Y+37	; 0x25
     e98:	9e a1       	ldd	r25, Y+38	; 0x26
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <main+0x2c4>
     e9e:	9e a3       	std	Y+38, r25	; 0x26
     ea0:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	8b a1       	ldd	r24, Y+35	; 0x23
     ea4:	9c a1       	ldd	r25, Y+36	; 0x24
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	9c a3       	std	Y+36, r25	; 0x24
     eaa:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	8b a1       	ldd	r24, Y+35	; 0x23
     eae:	9c a1       	ldd	r25, Y+36	; 0x24
     eb0:	89 2b       	or	r24, r25
     eb2:	69 f7       	brne	.-38     	; 0xe8e <main+0x2b8>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <main+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     eb8:	78 a1       	ldd	r23, Y+32	; 0x20
     eba:	89 a1       	ldd	r24, Y+33	; 0x21
     ebc:	9a a1       	ldd	r25, Y+34	; 0x22
     ebe:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9c a3       	std	Y+36, r25	; 0x24
     ec8:	8b a3       	std	Y+35, r24	; 0x23
     eca:	8b a1       	ldd	r24, Y+35	; 0x23
     ecc:	9c a1       	ldd	r25, Y+36	; 0x24
     ece:	98 a7       	std	Y+40, r25	; 0x28
     ed0:	8f a3       	std	Y+39, r24	; 0x27
     ed2:	8f a1       	ldd	r24, Y+39	; 0x27
     ed4:	98 a5       	ldd	r25, Y+40	; 0x28
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <main+0x300>
     eda:	98 a7       	std	Y+40, r25	; 0x28
     edc:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(300);
	LCD_clear_screen();
     ede:	0e 94 0e 05 	call	0xa1c	; 0xa1c <LCD_clear_screen>
	unsigned char count=0;
     ee2:	1b 86       	std	Y+11, r1	; 0x0b
	unsigned char flag1=0, flag2=0;
     ee4:	1c 86       	std	Y+12, r1	; 0x0c
     ee6:	1d 86       	std	Y+13, r1	; 0x0d
	
	while(1)
	{
		
		
		if(!flag1)
     ee8:	8c 85       	ldd	r24, Y+12	; 0x0c
     eea:	88 23       	and	r24, r24
     eec:	21 f4       	brne	.+8      	; 0xef6 <main+0x320>
			pressed_key = KEYPAD_GET_CHAR();
     eee:	0e 94 60 00 	call	0xc0	; 0xc0 <KEYPAD_GET_CHAR>
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	08 c0       	rjmp	.+16     	; 0xf06 <main+0x330>
		else if(flag2)
     ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef8:	88 23       	and	r24, r24
     efa:	29 f0       	breq	.+10     	; 0xf06 <main+0x330>
		{
			second_pressed_key = KEYPAD_GET_CHAR();
     efc:	0e 94 60 00 	call	0xc0	; 0xc0 <KEYPAD_GET_CHAR>
     f00:	8e 87       	std	Y+14, r24	; 0x0e
			pressed_key=second_pressed_key;
     f02:	8e 85       	ldd	r24, Y+14	; 0x0e
     f04:	89 83       	std	Y+1, r24	; 0x01
		}
	
		if (pressed_key == '+' || pressed_key == '-' || pressed_key == '*' || pressed_key == '/')
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	8b 32       	cpi	r24, 0x2B	; 43
     f0a:	49 f0       	breq	.+18     	; 0xf1e <main+0x348>
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	8d 32       	cpi	r24, 0x2D	; 45
     f10:	31 f0       	breq	.+12     	; 0xf1e <main+0x348>
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	8a 32       	cpi	r24, 0x2A	; 42
     f16:	19 f0       	breq	.+6      	; 0xf1e <main+0x348>
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	8f 32       	cpi	r24, 0x2F	; 47
     f1c:	31 f4       	brne	.+12     	; 0xf2a <main+0x354>
		{
			op=pressed_key;
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	8a 83       	std	Y+2, r24	; 0x02
			flag1=1;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	8c 87       	std	Y+12, r24	; 0x0c
			flag2=1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	8d 87       	std	Y+13, r24	; 0x0d
		}
		
		if(pressed_key >= '0' && pressed_key <= '9' && op == '$')
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	80 33       	cpi	r24, 0x30	; 48
     f2e:	78 f1       	brcs	.+94     	; 0xf8e <main+0x3b8>
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	8a 33       	cpi	r24, 0x3A	; 58
     f34:	60 f5       	brcc	.+88     	; 0xf8e <main+0x3b8>
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	84 32       	cpi	r24, 0x24	; 36
     f3a:	49 f5       	brne	.+82     	; 0xf8e <main+0x3b8>
		{
			val1=val1*10+(pressed_key-'0');
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e2       	ldi	r20, 0x20	; 32
     f42:	51 e4       	ldi	r21, 0x41	; 65
     f44:	6b 81       	ldd	r22, Y+3	; 0x03
     f46:	7c 81       	ldd	r23, Y+4	; 0x04
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	6c 01       	movw	r12, r24
     f56:	7d 01       	movw	r14, r26
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	c0 97       	sbiw	r24, 0x30	; 48
     f60:	09 2e       	mov	r0, r25
     f62:	00 0c       	add	r0, r0
     f64:	aa 0b       	sbc	r26, r26
     f66:	bb 0b       	sbc	r27, r27
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__floatsisf>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	9c 01       	movw	r18, r24
     f76:	ad 01       	movw	r20, r26
     f78:	c7 01       	movw	r24, r14
     f7a:	b6 01       	movw	r22, r12
     f7c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__addsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	8b 83       	std	Y+3, r24	; 0x03
     f86:	9c 83       	std	Y+4, r25	; 0x04
     f88:	ad 83       	std	Y+5, r26	; 0x05
     f8a:	be 83       	std	Y+6, r27	; 0x06
     f8c:	31 c0       	rjmp	.+98     	; 0xff0 <main+0x41a>
		}
		
		else if(pressed_key >= '0' && pressed_key <= '9' && op != '$')
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	80 33       	cpi	r24, 0x30	; 48
     f92:	70 f1       	brcs	.+92     	; 0xff0 <main+0x41a>
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	8a 33       	cpi	r24, 0x3A	; 58
     f98:	58 f5       	brcc	.+86     	; 0xff0 <main+0x41a>
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	84 32       	cpi	r24, 0x24	; 36
     f9e:	41 f1       	breq	.+80     	; 0xff0 <main+0x41a>
		{
			val2=val2*10+(pressed_key-'0');
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	6f 81       	ldd	r22, Y+7	; 0x07
     faa:	78 85       	ldd	r23, Y+8	; 0x08
     fac:	89 85       	ldd	r24, Y+9	; 0x09
     fae:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb0:	0e 94 34 0a 	call	0x1468	; 0x1468 <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	6c 01       	movw	r12, r24
     fba:	7d 01       	movw	r14, r26
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	c0 97       	sbiw	r24, 0x30	; 48
     fc4:	09 2e       	mov	r0, r25
     fc6:	00 0c       	add	r0, r0
     fc8:	aa 0b       	sbc	r26, r26
     fca:	bb 0b       	sbc	r27, r27
     fcc:	bc 01       	movw	r22, r24
     fce:	cd 01       	movw	r24, r26
     fd0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__floatsisf>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	9c 01       	movw	r18, r24
     fda:	ad 01       	movw	r20, r26
     fdc:	c7 01       	movw	r24, r14
     fde:	b6 01       	movw	r22, r12
     fe0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__addsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8f 83       	std	Y+7, r24	; 0x07
     fea:	98 87       	std	Y+8, r25	; 0x08
     fec:	a9 87       	std	Y+9, r26	; 0x09
     fee:	ba 87       	std	Y+10, r27	; 0x0a
		}
		

			
		switch (pressed_key)
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	8f 33       	cpi	r24, 0x3F	; 63
     ff8:	91 05       	cpc	r25, r1
     ffa:	29 f0       	breq	.+10     	; 0x1006 <main+0x430>
     ffc:	8e 34       	cpi	r24, 0x4E	; 78
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <main+0x42e>
    1002:	5f c0       	rjmp	.+190    	; 0x10c2 <main+0x4ec>
    1004:	0f c0       	rjmp	.+30     	; 0x1024 <main+0x44e>
		{
		case ('?'):
			LCD_clear_screen();
    1006:	0e 94 0e 05 	call	0xa1c	; 0xa1c <LCD_clear_screen>
			op = '$';
    100a:	84 e2       	ldi	r24, 0x24	; 36
    100c:	8a 83       	std	Y+2, r24	; 0x02
			val1=0;
    100e:	1b 82       	std	Y+3, r1	; 0x03
    1010:	1c 82       	std	Y+4, r1	; 0x04
    1012:	1d 82       	std	Y+5, r1	; 0x05
    1014:	1e 82       	std	Y+6, r1	; 0x06
			val2=0;
    1016:	1f 82       	std	Y+7, r1	; 0x07
    1018:	18 86       	std	Y+8, r1	; 0x08
    101a:	19 86       	std	Y+9, r1	; 0x09
    101c:	1a 86       	std	Y+10, r1	; 0x0a
			flag1=0;
    101e:	1c 86       	std	Y+12, r1	; 0x0c
			flag2=0;
    1020:	1d 86       	std	Y+13, r1	; 0x0d
			break;
    1022:	50 c0       	rjmp	.+160    	; 0x10c4 <main+0x4ee>
		case('N'):
			break;
		default:
			if(count == 16)
    1024:	8b 85       	ldd	r24, Y+11	; 0x0b
    1026:	80 31       	cpi	r24, 0x10	; 16
    1028:	29 f4       	brne	.+10     	; 0x1034 <main+0x45e>
			{
				LCD_Cursor_XY(1,0);
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_Cursor_XY>
				count=0;
    1032:	1b 86       	std	Y+11, r1	; 0x0b
			}
			LCD_write_char(pressed_key);
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_write_char>
			
			if(pressed_key=='=')
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	8d 33       	cpi	r24, 0x3D	; 61
    103e:	e9 f5       	brne	.+122    	; 0x10ba <main+0x4e4>
				{
				    res=KEYPAD_CALC(val1 ,val2 ,op);
    1040:	6f 81       	ldd	r22, Y+7	; 0x07
    1042:	78 85       	ldd	r23, Y+8	; 0x08
    1044:	89 85       	ldd	r24, Y+9	; 0x09
    1046:	9a 85       	ldd	r25, Y+10	; 0x0a
    1048:	0e 94 47 09 	call	0x128e	; 0x128e <__fixsfsi>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	8c 01       	movw	r16, r24
    1052:	6b 81       	ldd	r22, Y+3	; 0x03
    1054:	7c 81       	ldd	r23, Y+4	; 0x04
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	0e 94 47 09 	call	0x128e	; 0x128e <__fixsfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	4a 81       	ldd	r20, Y+2	; 0x02
    1064:	b8 01       	movw	r22, r16
    1066:	0e 94 89 01 	call	0x312	; 0x312 <KEYPAD_CALC>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	8f 87       	std	Y+15, r24	; 0x0f
    1070:	98 8b       	std	Y+16, r25	; 0x10
    1072:	a9 8b       	std	Y+17, r26	; 0x11
    1074:	ba 8b       	std	Y+18, r27	; 0x12
					if(op == '/')
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	8f 32       	cpi	r24, 0x2F	; 47
    107a:	49 f4       	brne	.+18     	; 0x108e <main+0x4b8>
						LCD_display_realNum(res);
    107c:	8f 85       	ldd	r24, Y+15	; 0x0f
    107e:	98 89       	ldd	r25, Y+16	; 0x10
    1080:	a9 89       	ldd	r26, Y+17	; 0x11
    1082:	ba 89       	ldd	r27, Y+18	; 0x12
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_display_realNum>
    108c:	0a c0       	rjmp	.+20     	; 0x10a2 <main+0x4cc>
					else
						LCD_display_intNum(res);
    108e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1090:	78 89       	ldd	r23, Y+16	; 0x10
    1092:	89 89       	ldd	r24, Y+17	; 0x11
    1094:	9a 89       	ldd	r25, Y+18	; 0x12
    1096:	0e 94 47 09 	call	0x128e	; 0x128e <__fixsfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_display_intNum>
					
					 op = '$'; 
    10a2:	84 e2       	ldi	r24, 0x24	; 36
    10a4:	8a 83       	std	Y+2, r24	; 0x02
					 val1=0;
    10a6:	1b 82       	std	Y+3, r1	; 0x03
    10a8:	1c 82       	std	Y+4, r1	; 0x04
    10aa:	1d 82       	std	Y+5, r1	; 0x05
    10ac:	1e 82       	std	Y+6, r1	; 0x06
					 val2=0;
    10ae:	1f 82       	std	Y+7, r1	; 0x07
    10b0:	18 86       	std	Y+8, r1	; 0x08
    10b2:	19 86       	std	Y+9, r1	; 0x09
    10b4:	1a 86       	std	Y+10, r1	; 0x0a
					 flag1=0;
    10b6:	1c 86       	std	Y+12, r1	; 0x0c
					 flag2=0;
    10b8:	1d 86       	std	Y+13, r1	; 0x0d
				}

			count++;
    10ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	8b 87       	std	Y+11, r24	; 0x0b
			break;
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <main+0x4ee>
			val2=0;
			flag1=0;
			flag2=0;
			break;
		case('N'):
			break;
    10c2:	00 00       	nop

			count++;
			break;
		}
			
	}
    10c4:	11 cf       	rjmp	.-478    	; 0xee8 <main+0x312>

000010c6 <__subsf3>:
    10c6:	50 58       	subi	r21, 0x80	; 128

000010c8 <__addsf3>:
    10c8:	bb 27       	eor	r27, r27
    10ca:	aa 27       	eor	r26, r26
    10cc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__addsf3x>
    10d0:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__fp_round>
    10d4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_pscA>
    10d8:	38 f0       	brcs	.+14     	; 0x10e8 <__addsf3+0x20>
    10da:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_pscB>
    10de:	20 f0       	brcs	.+8      	; 0x10e8 <__addsf3+0x20>
    10e0:	39 f4       	brne	.+14     	; 0x10f0 <__addsf3+0x28>
    10e2:	9f 3f       	cpi	r25, 0xFF	; 255
    10e4:	19 f4       	brne	.+6      	; 0x10ec <__addsf3+0x24>
    10e6:	26 f4       	brtc	.+8      	; 0x10f0 <__addsf3+0x28>
    10e8:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_nan>
    10ec:	0e f4       	brtc	.+2      	; 0x10f0 <__addsf3+0x28>
    10ee:	e0 95       	com	r30
    10f0:	e7 fb       	bst	r30, 7
    10f2:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__fp_inf>

000010f6 <__addsf3x>:
    10f6:	e9 2f       	mov	r30, r25
    10f8:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_split3>
    10fc:	58 f3       	brcs	.-42     	; 0x10d4 <__addsf3+0xc>
    10fe:	ba 17       	cp	r27, r26
    1100:	62 07       	cpc	r22, r18
    1102:	73 07       	cpc	r23, r19
    1104:	84 07       	cpc	r24, r20
    1106:	95 07       	cpc	r25, r21
    1108:	20 f0       	brcs	.+8      	; 0x1112 <__addsf3x+0x1c>
    110a:	79 f4       	brne	.+30     	; 0x112a <__addsf3x+0x34>
    110c:	a6 f5       	brtc	.+104    	; 0x1176 <__addsf3x+0x80>
    110e:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__fp_zero>
    1112:	0e f4       	brtc	.+2      	; 0x1116 <__addsf3x+0x20>
    1114:	e0 95       	com	r30
    1116:	0b 2e       	mov	r0, r27
    1118:	ba 2f       	mov	r27, r26
    111a:	a0 2d       	mov	r26, r0
    111c:	0b 01       	movw	r0, r22
    111e:	b9 01       	movw	r22, r18
    1120:	90 01       	movw	r18, r0
    1122:	0c 01       	movw	r0, r24
    1124:	ca 01       	movw	r24, r20
    1126:	a0 01       	movw	r20, r0
    1128:	11 24       	eor	r1, r1
    112a:	ff 27       	eor	r31, r31
    112c:	59 1b       	sub	r21, r25
    112e:	99 f0       	breq	.+38     	; 0x1156 <__addsf3x+0x60>
    1130:	59 3f       	cpi	r21, 0xF9	; 249
    1132:	50 f4       	brcc	.+20     	; 0x1148 <__addsf3x+0x52>
    1134:	50 3e       	cpi	r21, 0xE0	; 224
    1136:	68 f1       	brcs	.+90     	; 0x1192 <__addsf3x+0x9c>
    1138:	1a 16       	cp	r1, r26
    113a:	f0 40       	sbci	r31, 0x00	; 0
    113c:	a2 2f       	mov	r26, r18
    113e:	23 2f       	mov	r18, r19
    1140:	34 2f       	mov	r19, r20
    1142:	44 27       	eor	r20, r20
    1144:	58 5f       	subi	r21, 0xF8	; 248
    1146:	f3 cf       	rjmp	.-26     	; 0x112e <__addsf3x+0x38>
    1148:	46 95       	lsr	r20
    114a:	37 95       	ror	r19
    114c:	27 95       	ror	r18
    114e:	a7 95       	ror	r26
    1150:	f0 40       	sbci	r31, 0x00	; 0
    1152:	53 95       	inc	r21
    1154:	c9 f7       	brne	.-14     	; 0x1148 <__addsf3x+0x52>
    1156:	7e f4       	brtc	.+30     	; 0x1176 <__addsf3x+0x80>
    1158:	1f 16       	cp	r1, r31
    115a:	ba 0b       	sbc	r27, r26
    115c:	62 0b       	sbc	r22, r18
    115e:	73 0b       	sbc	r23, r19
    1160:	84 0b       	sbc	r24, r20
    1162:	ba f0       	brmi	.+46     	; 0x1192 <__addsf3x+0x9c>
    1164:	91 50       	subi	r25, 0x01	; 1
    1166:	a1 f0       	breq	.+40     	; 0x1190 <__addsf3x+0x9a>
    1168:	ff 0f       	add	r31, r31
    116a:	bb 1f       	adc	r27, r27
    116c:	66 1f       	adc	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	c2 f7       	brpl	.-16     	; 0x1164 <__addsf3x+0x6e>
    1174:	0e c0       	rjmp	.+28     	; 0x1192 <__addsf3x+0x9c>
    1176:	ba 0f       	add	r27, r26
    1178:	62 1f       	adc	r22, r18
    117a:	73 1f       	adc	r23, r19
    117c:	84 1f       	adc	r24, r20
    117e:	48 f4       	brcc	.+18     	; 0x1192 <__addsf3x+0x9c>
    1180:	87 95       	ror	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	b7 95       	ror	r27
    1188:	f7 95       	ror	r31
    118a:	9e 3f       	cpi	r25, 0xFE	; 254
    118c:	08 f0       	brcs	.+2      	; 0x1190 <__addsf3x+0x9a>
    118e:	b0 cf       	rjmp	.-160    	; 0x10f0 <__addsf3+0x28>
    1190:	93 95       	inc	r25
    1192:	88 0f       	add	r24, r24
    1194:	08 f0       	brcs	.+2      	; 0x1198 <__addsf3x+0xa2>
    1196:	99 27       	eor	r25, r25
    1198:	ee 0f       	add	r30, r30
    119a:	97 95       	ror	r25
    119c:	87 95       	ror	r24
    119e:	08 95       	ret

000011a0 <__cmpsf2>:
    11a0:	0e 94 ba 09 	call	0x1374	; 0x1374 <__fp_cmp>
    11a4:	08 f4       	brcc	.+2      	; 0x11a8 <__cmpsf2+0x8>
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	08 95       	ret

000011aa <__divsf3>:
    11aa:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__divsf3x>
    11ae:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__fp_round>
    11b2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_pscB>
    11b6:	58 f0       	brcs	.+22     	; 0x11ce <__divsf3+0x24>
    11b8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_pscA>
    11bc:	40 f0       	brcs	.+16     	; 0x11ce <__divsf3+0x24>
    11be:	29 f4       	brne	.+10     	; 0x11ca <__divsf3+0x20>
    11c0:	5f 3f       	cpi	r21, 0xFF	; 255
    11c2:	29 f0       	breq	.+10     	; 0x11ce <__divsf3+0x24>
    11c4:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__fp_inf>
    11c8:	51 11       	cpse	r21, r1
    11ca:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__fp_szero>
    11ce:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_nan>

000011d2 <__divsf3x>:
    11d2:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_split3>
    11d6:	68 f3       	brcs	.-38     	; 0x11b2 <__divsf3+0x8>

000011d8 <__divsf3_pse>:
    11d8:	99 23       	and	r25, r25
    11da:	b1 f3       	breq	.-20     	; 0x11c8 <__divsf3+0x1e>
    11dc:	55 23       	and	r21, r21
    11de:	91 f3       	breq	.-28     	; 0x11c4 <__divsf3+0x1a>
    11e0:	95 1b       	sub	r25, r21
    11e2:	55 0b       	sbc	r21, r21
    11e4:	bb 27       	eor	r27, r27
    11e6:	aa 27       	eor	r26, r26
    11e8:	62 17       	cp	r22, r18
    11ea:	73 07       	cpc	r23, r19
    11ec:	84 07       	cpc	r24, r20
    11ee:	38 f0       	brcs	.+14     	; 0x11fe <__divsf3_pse+0x26>
    11f0:	9f 5f       	subi	r25, 0xFF	; 255
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	22 0f       	add	r18, r18
    11f6:	33 1f       	adc	r19, r19
    11f8:	44 1f       	adc	r20, r20
    11fa:	aa 1f       	adc	r26, r26
    11fc:	a9 f3       	breq	.-22     	; 0x11e8 <__divsf3_pse+0x10>
    11fe:	35 d0       	rcall	.+106    	; 0x126a <__divsf3_pse+0x92>
    1200:	0e 2e       	mov	r0, r30
    1202:	3a f0       	brmi	.+14     	; 0x1212 <__divsf3_pse+0x3a>
    1204:	e0 e8       	ldi	r30, 0x80	; 128
    1206:	32 d0       	rcall	.+100    	; 0x126c <__divsf3_pse+0x94>
    1208:	91 50       	subi	r25, 0x01	; 1
    120a:	50 40       	sbci	r21, 0x00	; 0
    120c:	e6 95       	lsr	r30
    120e:	00 1c       	adc	r0, r0
    1210:	ca f7       	brpl	.-14     	; 0x1204 <__divsf3_pse+0x2c>
    1212:	2b d0       	rcall	.+86     	; 0x126a <__divsf3_pse+0x92>
    1214:	fe 2f       	mov	r31, r30
    1216:	29 d0       	rcall	.+82     	; 0x126a <__divsf3_pse+0x92>
    1218:	66 0f       	add	r22, r22
    121a:	77 1f       	adc	r23, r23
    121c:	88 1f       	adc	r24, r24
    121e:	bb 1f       	adc	r27, r27
    1220:	26 17       	cp	r18, r22
    1222:	37 07       	cpc	r19, r23
    1224:	48 07       	cpc	r20, r24
    1226:	ab 07       	cpc	r26, r27
    1228:	b0 e8       	ldi	r27, 0x80	; 128
    122a:	09 f0       	breq	.+2      	; 0x122e <__divsf3_pse+0x56>
    122c:	bb 0b       	sbc	r27, r27
    122e:	80 2d       	mov	r24, r0
    1230:	bf 01       	movw	r22, r30
    1232:	ff 27       	eor	r31, r31
    1234:	93 58       	subi	r25, 0x83	; 131
    1236:	5f 4f       	sbci	r21, 0xFF	; 255
    1238:	3a f0       	brmi	.+14     	; 0x1248 <__divsf3_pse+0x70>
    123a:	9e 3f       	cpi	r25, 0xFE	; 254
    123c:	51 05       	cpc	r21, r1
    123e:	78 f0       	brcs	.+30     	; 0x125e <__divsf3_pse+0x86>
    1240:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__fp_inf>
    1244:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__fp_szero>
    1248:	5f 3f       	cpi	r21, 0xFF	; 255
    124a:	e4 f3       	brlt	.-8      	; 0x1244 <__divsf3_pse+0x6c>
    124c:	98 3e       	cpi	r25, 0xE8	; 232
    124e:	d4 f3       	brlt	.-12     	; 0x1244 <__divsf3_pse+0x6c>
    1250:	86 95       	lsr	r24
    1252:	77 95       	ror	r23
    1254:	67 95       	ror	r22
    1256:	b7 95       	ror	r27
    1258:	f7 95       	ror	r31
    125a:	9f 5f       	subi	r25, 0xFF	; 255
    125c:	c9 f7       	brne	.-14     	; 0x1250 <__divsf3_pse+0x78>
    125e:	88 0f       	add	r24, r24
    1260:	91 1d       	adc	r25, r1
    1262:	96 95       	lsr	r25
    1264:	87 95       	ror	r24
    1266:	97 f9       	bld	r25, 7
    1268:	08 95       	ret
    126a:	e1 e0       	ldi	r30, 0x01	; 1
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	88 1f       	adc	r24, r24
    1272:	bb 1f       	adc	r27, r27
    1274:	62 17       	cp	r22, r18
    1276:	73 07       	cpc	r23, r19
    1278:	84 07       	cpc	r24, r20
    127a:	ba 07       	cpc	r27, r26
    127c:	20 f0       	brcs	.+8      	; 0x1286 <__divsf3_pse+0xae>
    127e:	62 1b       	sub	r22, r18
    1280:	73 0b       	sbc	r23, r19
    1282:	84 0b       	sbc	r24, r20
    1284:	ba 0b       	sbc	r27, r26
    1286:	ee 1f       	adc	r30, r30
    1288:	88 f7       	brcc	.-30     	; 0x126c <__divsf3_pse+0x94>
    128a:	e0 95       	com	r30
    128c:	08 95       	ret

0000128e <__fixsfsi>:
    128e:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixunssfsi>
    1292:	68 94       	set
    1294:	b1 11       	cpse	r27, r1
    1296:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__fp_szero>
    129a:	08 95       	ret

0000129c <__fixunssfsi>:
    129c:	0e 94 0e 0a 	call	0x141c	; 0x141c <__fp_splitA>
    12a0:	88 f0       	brcs	.+34     	; 0x12c4 <__fixunssfsi+0x28>
    12a2:	9f 57       	subi	r25, 0x7F	; 127
    12a4:	98 f0       	brcs	.+38     	; 0x12cc <__fixunssfsi+0x30>
    12a6:	b9 2f       	mov	r27, r25
    12a8:	99 27       	eor	r25, r25
    12aa:	b7 51       	subi	r27, 0x17	; 23
    12ac:	b0 f0       	brcs	.+44     	; 0x12da <__fixunssfsi+0x3e>
    12ae:	e1 f0       	breq	.+56     	; 0x12e8 <__fixunssfsi+0x4c>
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	88 1f       	adc	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	1a f0       	brmi	.+6      	; 0x12c0 <__fixunssfsi+0x24>
    12ba:	ba 95       	dec	r27
    12bc:	c9 f7       	brne	.-14     	; 0x12b0 <__fixunssfsi+0x14>
    12be:	14 c0       	rjmp	.+40     	; 0x12e8 <__fixunssfsi+0x4c>
    12c0:	b1 30       	cpi	r27, 0x01	; 1
    12c2:	91 f0       	breq	.+36     	; 0x12e8 <__fixunssfsi+0x4c>
    12c4:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_zero>
    12c8:	b1 e0       	ldi	r27, 0x01	; 1
    12ca:	08 95       	ret
    12cc:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__fp_zero>
    12d0:	67 2f       	mov	r22, r23
    12d2:	78 2f       	mov	r23, r24
    12d4:	88 27       	eor	r24, r24
    12d6:	b8 5f       	subi	r27, 0xF8	; 248
    12d8:	39 f0       	breq	.+14     	; 0x12e8 <__fixunssfsi+0x4c>
    12da:	b9 3f       	cpi	r27, 0xF9	; 249
    12dc:	cc f3       	brlt	.-14     	; 0x12d0 <__fixunssfsi+0x34>
    12de:	86 95       	lsr	r24
    12e0:	77 95       	ror	r23
    12e2:	67 95       	ror	r22
    12e4:	b3 95       	inc	r27
    12e6:	d9 f7       	brne	.-10     	; 0x12de <__fixunssfsi+0x42>
    12e8:	3e f4       	brtc	.+14     	; 0x12f8 <__fixunssfsi+0x5c>
    12ea:	90 95       	com	r25
    12ec:	80 95       	com	r24
    12ee:	70 95       	com	r23
    12f0:	61 95       	neg	r22
    12f2:	7f 4f       	sbci	r23, 0xFF	; 255
    12f4:	8f 4f       	sbci	r24, 0xFF	; 255
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	08 95       	ret

000012fa <__floatunsisf>:
    12fa:	e8 94       	clt
    12fc:	09 c0       	rjmp	.+18     	; 0x1310 <__floatsisf+0x12>

000012fe <__floatsisf>:
    12fe:	97 fb       	bst	r25, 7
    1300:	3e f4       	brtc	.+14     	; 0x1310 <__floatsisf+0x12>
    1302:	90 95       	com	r25
    1304:	80 95       	com	r24
    1306:	70 95       	com	r23
    1308:	61 95       	neg	r22
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	8f 4f       	sbci	r24, 0xFF	; 255
    130e:	9f 4f       	sbci	r25, 0xFF	; 255
    1310:	99 23       	and	r25, r25
    1312:	a9 f0       	breq	.+42     	; 0x133e <__floatsisf+0x40>
    1314:	f9 2f       	mov	r31, r25
    1316:	96 e9       	ldi	r25, 0x96	; 150
    1318:	bb 27       	eor	r27, r27
    131a:	93 95       	inc	r25
    131c:	f6 95       	lsr	r31
    131e:	87 95       	ror	r24
    1320:	77 95       	ror	r23
    1322:	67 95       	ror	r22
    1324:	b7 95       	ror	r27
    1326:	f1 11       	cpse	r31, r1
    1328:	f8 cf       	rjmp	.-16     	; 0x131a <__floatsisf+0x1c>
    132a:	fa f4       	brpl	.+62     	; 0x136a <__floatsisf+0x6c>
    132c:	bb 0f       	add	r27, r27
    132e:	11 f4       	brne	.+4      	; 0x1334 <__floatsisf+0x36>
    1330:	60 ff       	sbrs	r22, 0
    1332:	1b c0       	rjmp	.+54     	; 0x136a <__floatsisf+0x6c>
    1334:	6f 5f       	subi	r22, 0xFF	; 255
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	8f 4f       	sbci	r24, 0xFF	; 255
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	16 c0       	rjmp	.+44     	; 0x136a <__floatsisf+0x6c>
    133e:	88 23       	and	r24, r24
    1340:	11 f0       	breq	.+4      	; 0x1346 <__floatsisf+0x48>
    1342:	96 e9       	ldi	r25, 0x96	; 150
    1344:	11 c0       	rjmp	.+34     	; 0x1368 <__floatsisf+0x6a>
    1346:	77 23       	and	r23, r23
    1348:	21 f0       	breq	.+8      	; 0x1352 <__floatsisf+0x54>
    134a:	9e e8       	ldi	r25, 0x8E	; 142
    134c:	87 2f       	mov	r24, r23
    134e:	76 2f       	mov	r23, r22
    1350:	05 c0       	rjmp	.+10     	; 0x135c <__floatsisf+0x5e>
    1352:	66 23       	and	r22, r22
    1354:	71 f0       	breq	.+28     	; 0x1372 <__floatsisf+0x74>
    1356:	96 e8       	ldi	r25, 0x86	; 134
    1358:	86 2f       	mov	r24, r22
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	2a f0       	brmi	.+10     	; 0x136a <__floatsisf+0x6c>
    1360:	9a 95       	dec	r25
    1362:	66 0f       	add	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	da f7       	brpl	.-10     	; 0x1360 <__floatsisf+0x62>
    136a:	88 0f       	add	r24, r24
    136c:	96 95       	lsr	r25
    136e:	87 95       	ror	r24
    1370:	97 f9       	bld	r25, 7
    1372:	08 95       	ret

00001374 <__fp_cmp>:
    1374:	99 0f       	add	r25, r25
    1376:	00 08       	sbc	r0, r0
    1378:	55 0f       	add	r21, r21
    137a:	aa 0b       	sbc	r26, r26
    137c:	e0 e8       	ldi	r30, 0x80	; 128
    137e:	fe ef       	ldi	r31, 0xFE	; 254
    1380:	16 16       	cp	r1, r22
    1382:	17 06       	cpc	r1, r23
    1384:	e8 07       	cpc	r30, r24
    1386:	f9 07       	cpc	r31, r25
    1388:	c0 f0       	brcs	.+48     	; 0x13ba <__fp_cmp+0x46>
    138a:	12 16       	cp	r1, r18
    138c:	13 06       	cpc	r1, r19
    138e:	e4 07       	cpc	r30, r20
    1390:	f5 07       	cpc	r31, r21
    1392:	98 f0       	brcs	.+38     	; 0x13ba <__fp_cmp+0x46>
    1394:	62 1b       	sub	r22, r18
    1396:	73 0b       	sbc	r23, r19
    1398:	84 0b       	sbc	r24, r20
    139a:	95 0b       	sbc	r25, r21
    139c:	39 f4       	brne	.+14     	; 0x13ac <__fp_cmp+0x38>
    139e:	0a 26       	eor	r0, r26
    13a0:	61 f0       	breq	.+24     	; 0x13ba <__fp_cmp+0x46>
    13a2:	23 2b       	or	r18, r19
    13a4:	24 2b       	or	r18, r20
    13a6:	25 2b       	or	r18, r21
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <__fp_cmp+0x3e>
    13aa:	08 95       	ret
    13ac:	0a 26       	eor	r0, r26
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <__fp_cmp+0x3e>
    13b0:	a1 40       	sbci	r26, 0x01	; 1
    13b2:	a6 95       	lsr	r26
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	81 1d       	adc	r24, r1
    13b8:	81 1d       	adc	r24, r1
    13ba:	08 95       	ret

000013bc <__fp_inf>:
    13bc:	97 f9       	bld	r25, 7
    13be:	9f 67       	ori	r25, 0x7F	; 127
    13c0:	80 e8       	ldi	r24, 0x80	; 128
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	08 95       	ret

000013c8 <__fp_nan>:
    13c8:	9f ef       	ldi	r25, 0xFF	; 255
    13ca:	80 ec       	ldi	r24, 0xC0	; 192
    13cc:	08 95       	ret

000013ce <__fp_pscA>:
    13ce:	00 24       	eor	r0, r0
    13d0:	0a 94       	dec	r0
    13d2:	16 16       	cp	r1, r22
    13d4:	17 06       	cpc	r1, r23
    13d6:	18 06       	cpc	r1, r24
    13d8:	09 06       	cpc	r0, r25
    13da:	08 95       	ret

000013dc <__fp_pscB>:
    13dc:	00 24       	eor	r0, r0
    13de:	0a 94       	dec	r0
    13e0:	12 16       	cp	r1, r18
    13e2:	13 06       	cpc	r1, r19
    13e4:	14 06       	cpc	r1, r20
    13e6:	05 06       	cpc	r0, r21
    13e8:	08 95       	ret

000013ea <__fp_round>:
    13ea:	09 2e       	mov	r0, r25
    13ec:	03 94       	inc	r0
    13ee:	00 0c       	add	r0, r0
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <__fp_round+0xc>
    13f2:	88 23       	and	r24, r24
    13f4:	52 f0       	brmi	.+20     	; 0x140a <__fp_round+0x20>
    13f6:	bb 0f       	add	r27, r27
    13f8:	40 f4       	brcc	.+16     	; 0x140a <__fp_round+0x20>
    13fa:	bf 2b       	or	r27, r31
    13fc:	11 f4       	brne	.+4      	; 0x1402 <__fp_round+0x18>
    13fe:	60 ff       	sbrs	r22, 0
    1400:	04 c0       	rjmp	.+8      	; 0x140a <__fp_round+0x20>
    1402:	6f 5f       	subi	r22, 0xFF	; 255
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	8f 4f       	sbci	r24, 0xFF	; 255
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__fp_split3>:
    140c:	57 fd       	sbrc	r21, 7
    140e:	90 58       	subi	r25, 0x80	; 128
    1410:	44 0f       	add	r20, r20
    1412:	55 1f       	adc	r21, r21
    1414:	59 f0       	breq	.+22     	; 0x142c <__fp_splitA+0x10>
    1416:	5f 3f       	cpi	r21, 0xFF	; 255
    1418:	71 f0       	breq	.+28     	; 0x1436 <__fp_splitA+0x1a>
    141a:	47 95       	ror	r20

0000141c <__fp_splitA>:
    141c:	88 0f       	add	r24, r24
    141e:	97 fb       	bst	r25, 7
    1420:	99 1f       	adc	r25, r25
    1422:	61 f0       	breq	.+24     	; 0x143c <__fp_splitA+0x20>
    1424:	9f 3f       	cpi	r25, 0xFF	; 255
    1426:	79 f0       	breq	.+30     	; 0x1446 <__fp_splitA+0x2a>
    1428:	87 95       	ror	r24
    142a:	08 95       	ret
    142c:	12 16       	cp	r1, r18
    142e:	13 06       	cpc	r1, r19
    1430:	14 06       	cpc	r1, r20
    1432:	55 1f       	adc	r21, r21
    1434:	f2 cf       	rjmp	.-28     	; 0x141a <__fp_split3+0xe>
    1436:	46 95       	lsr	r20
    1438:	f1 df       	rcall	.-30     	; 0x141c <__fp_splitA>
    143a:	08 c0       	rjmp	.+16     	; 0x144c <__fp_splitA+0x30>
    143c:	16 16       	cp	r1, r22
    143e:	17 06       	cpc	r1, r23
    1440:	18 06       	cpc	r1, r24
    1442:	99 1f       	adc	r25, r25
    1444:	f1 cf       	rjmp	.-30     	; 0x1428 <__fp_splitA+0xc>
    1446:	86 95       	lsr	r24
    1448:	71 05       	cpc	r23, r1
    144a:	61 05       	cpc	r22, r1
    144c:	08 94       	sec
    144e:	08 95       	ret

00001450 <__fp_zero>:
    1450:	e8 94       	clt

00001452 <__fp_szero>:
    1452:	bb 27       	eor	r27, r27
    1454:	66 27       	eor	r22, r22
    1456:	77 27       	eor	r23, r23
    1458:	cb 01       	movw	r24, r22
    145a:	97 f9       	bld	r25, 7
    145c:	08 95       	ret

0000145e <__gesf2>:
    145e:	0e 94 ba 09 	call	0x1374	; 0x1374 <__fp_cmp>
    1462:	08 f4       	brcc	.+2      	; 0x1466 <__gesf2+0x8>
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	08 95       	ret

00001468 <__mulsf3>:
    1468:	0e 94 47 0a 	call	0x148e	; 0x148e <__mulsf3x>
    146c:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__fp_round>
    1470:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_pscA>
    1474:	38 f0       	brcs	.+14     	; 0x1484 <__mulsf3+0x1c>
    1476:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_pscB>
    147a:	20 f0       	brcs	.+8      	; 0x1484 <__mulsf3+0x1c>
    147c:	95 23       	and	r25, r21
    147e:	11 f0       	breq	.+4      	; 0x1484 <__mulsf3+0x1c>
    1480:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__fp_inf>
    1484:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_nan>
    1488:	11 24       	eor	r1, r1
    148a:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__fp_szero>

0000148e <__mulsf3x>:
    148e:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_split3>
    1492:	70 f3       	brcs	.-36     	; 0x1470 <__mulsf3+0x8>

00001494 <__mulsf3_pse>:
    1494:	95 9f       	mul	r25, r21
    1496:	c1 f3       	breq	.-16     	; 0x1488 <__mulsf3+0x20>
    1498:	95 0f       	add	r25, r21
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	55 1f       	adc	r21, r21
    149e:	62 9f       	mul	r22, r18
    14a0:	f0 01       	movw	r30, r0
    14a2:	72 9f       	mul	r23, r18
    14a4:	bb 27       	eor	r27, r27
    14a6:	f0 0d       	add	r31, r0
    14a8:	b1 1d       	adc	r27, r1
    14aa:	63 9f       	mul	r22, r19
    14ac:	aa 27       	eor	r26, r26
    14ae:	f0 0d       	add	r31, r0
    14b0:	b1 1d       	adc	r27, r1
    14b2:	aa 1f       	adc	r26, r26
    14b4:	64 9f       	mul	r22, r20
    14b6:	66 27       	eor	r22, r22
    14b8:	b0 0d       	add	r27, r0
    14ba:	a1 1d       	adc	r26, r1
    14bc:	66 1f       	adc	r22, r22
    14be:	82 9f       	mul	r24, r18
    14c0:	22 27       	eor	r18, r18
    14c2:	b0 0d       	add	r27, r0
    14c4:	a1 1d       	adc	r26, r1
    14c6:	62 1f       	adc	r22, r18
    14c8:	73 9f       	mul	r23, r19
    14ca:	b0 0d       	add	r27, r0
    14cc:	a1 1d       	adc	r26, r1
    14ce:	62 1f       	adc	r22, r18
    14d0:	83 9f       	mul	r24, r19
    14d2:	a0 0d       	add	r26, r0
    14d4:	61 1d       	adc	r22, r1
    14d6:	22 1f       	adc	r18, r18
    14d8:	74 9f       	mul	r23, r20
    14da:	33 27       	eor	r19, r19
    14dc:	a0 0d       	add	r26, r0
    14de:	61 1d       	adc	r22, r1
    14e0:	23 1f       	adc	r18, r19
    14e2:	84 9f       	mul	r24, r20
    14e4:	60 0d       	add	r22, r0
    14e6:	21 1d       	adc	r18, r1
    14e8:	82 2f       	mov	r24, r18
    14ea:	76 2f       	mov	r23, r22
    14ec:	6a 2f       	mov	r22, r26
    14ee:	11 24       	eor	r1, r1
    14f0:	9f 57       	subi	r25, 0x7F	; 127
    14f2:	50 40       	sbci	r21, 0x00	; 0
    14f4:	9a f0       	brmi	.+38     	; 0x151c <__mulsf3_pse+0x88>
    14f6:	f1 f0       	breq	.+60     	; 0x1534 <__mulsf3_pse+0xa0>
    14f8:	88 23       	and	r24, r24
    14fa:	4a f0       	brmi	.+18     	; 0x150e <__mulsf3_pse+0x7a>
    14fc:	ee 0f       	add	r30, r30
    14fe:	ff 1f       	adc	r31, r31
    1500:	bb 1f       	adc	r27, r27
    1502:	66 1f       	adc	r22, r22
    1504:	77 1f       	adc	r23, r23
    1506:	88 1f       	adc	r24, r24
    1508:	91 50       	subi	r25, 0x01	; 1
    150a:	50 40       	sbci	r21, 0x00	; 0
    150c:	a9 f7       	brne	.-22     	; 0x14f8 <__mulsf3_pse+0x64>
    150e:	9e 3f       	cpi	r25, 0xFE	; 254
    1510:	51 05       	cpc	r21, r1
    1512:	80 f0       	brcs	.+32     	; 0x1534 <__mulsf3_pse+0xa0>
    1514:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__fp_inf>
    1518:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__fp_szero>
    151c:	5f 3f       	cpi	r21, 0xFF	; 255
    151e:	e4 f3       	brlt	.-8      	; 0x1518 <__mulsf3_pse+0x84>
    1520:	98 3e       	cpi	r25, 0xE8	; 232
    1522:	d4 f3       	brlt	.-12     	; 0x1518 <__mulsf3_pse+0x84>
    1524:	86 95       	lsr	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	b7 95       	ror	r27
    152c:	f7 95       	ror	r31
    152e:	e7 95       	ror	r30
    1530:	9f 5f       	subi	r25, 0xFF	; 255
    1532:	c1 f7       	brne	.-16     	; 0x1524 <__mulsf3_pse+0x90>
    1534:	fe 2b       	or	r31, r30
    1536:	88 0f       	add	r24, r24
    1538:	91 1d       	adc	r25, r1
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret

00001542 <sprintf>:
    1542:	ae e0       	ldi	r26, 0x0E	; 14
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 ea       	ldi	r30, 0xA7	; 167
    1548:	fa e0       	ldi	r31, 0x0A	; 10
    154a:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__prologue_saves__+0x1c>
    154e:	0d 89       	ldd	r16, Y+21	; 0x15
    1550:	1e 89       	ldd	r17, Y+22	; 0x16
    1552:	86 e0       	ldi	r24, 0x06	; 6
    1554:	8c 83       	std	Y+4, r24	; 0x04
    1556:	1a 83       	std	Y+2, r17	; 0x02
    1558:	09 83       	std	Y+1, r16	; 0x01
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	9f e7       	ldi	r25, 0x7F	; 127
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
    1562:	ae 01       	movw	r20, r28
    1564:	47 5e       	subi	r20, 0xE7	; 231
    1566:	5f 4f       	sbci	r21, 0xFF	; 255
    1568:	6f 89       	ldd	r22, Y+23	; 0x17
    156a:	78 8d       	ldd	r23, Y+24	; 0x18
    156c:	ce 01       	movw	r24, r28
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	0e 94 c3 0a 	call	0x1586	; 0x1586 <vfprintf>
    1574:	ef 81       	ldd	r30, Y+7	; 0x07
    1576:	f8 85       	ldd	r31, Y+8	; 0x08
    1578:	e0 0f       	add	r30, r16
    157a:	f1 1f       	adc	r31, r17
    157c:	10 82       	st	Z, r1
    157e:	2e 96       	adiw	r28, 0x0e	; 14
    1580:	e4 e0       	ldi	r30, 0x04	; 4
    1582:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__epilogue_restores__+0x1c>

00001586 <vfprintf>:
    1586:	ab e0       	ldi	r26, 0x0B	; 11
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e9 ec       	ldi	r30, 0xC9	; 201
    158c:	fa e0       	ldi	r31, 0x0A	; 10
    158e:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__prologue_saves__>
    1592:	6c 01       	movw	r12, r24
    1594:	7b 01       	movw	r14, r22
    1596:	8a 01       	movw	r16, r20
    1598:	fc 01       	movw	r30, r24
    159a:	17 82       	std	Z+7, r1	; 0x07
    159c:	16 82       	std	Z+6, r1	; 0x06
    159e:	83 81       	ldd	r24, Z+3	; 0x03
    15a0:	81 ff       	sbrs	r24, 1
    15a2:	cc c1       	rjmp	.+920    	; 0x193c <vfprintf+0x3b6>
    15a4:	ce 01       	movw	r24, r28
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	3c 01       	movw	r6, r24
    15aa:	f6 01       	movw	r30, r12
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	f7 01       	movw	r30, r14
    15b0:	93 fd       	sbrc	r25, 3
    15b2:	85 91       	lpm	r24, Z+
    15b4:	93 ff       	sbrs	r25, 3
    15b6:	81 91       	ld	r24, Z+
    15b8:	7f 01       	movw	r14, r30
    15ba:	88 23       	and	r24, r24
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <vfprintf+0x3a>
    15be:	ba c1       	rjmp	.+884    	; 0x1934 <vfprintf+0x3ae>
    15c0:	85 32       	cpi	r24, 0x25	; 37
    15c2:	39 f4       	brne	.+14     	; 0x15d2 <vfprintf+0x4c>
    15c4:	93 fd       	sbrc	r25, 3
    15c6:	85 91       	lpm	r24, Z+
    15c8:	93 ff       	sbrs	r25, 3
    15ca:	81 91       	ld	r24, Z+
    15cc:	7f 01       	movw	r14, r30
    15ce:	85 32       	cpi	r24, 0x25	; 37
    15d0:	29 f4       	brne	.+10     	; 0x15dc <vfprintf+0x56>
    15d2:	b6 01       	movw	r22, r12
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    15da:	e7 cf       	rjmp	.-50     	; 0x15aa <vfprintf+0x24>
    15dc:	91 2c       	mov	r9, r1
    15de:	21 2c       	mov	r2, r1
    15e0:	31 2c       	mov	r3, r1
    15e2:	ff e1       	ldi	r31, 0x1F	; 31
    15e4:	f3 15       	cp	r31, r3
    15e6:	d8 f0       	brcs	.+54     	; 0x161e <vfprintf+0x98>
    15e8:	8b 32       	cpi	r24, 0x2B	; 43
    15ea:	79 f0       	breq	.+30     	; 0x160a <vfprintf+0x84>
    15ec:	38 f4       	brcc	.+14     	; 0x15fc <vfprintf+0x76>
    15ee:	80 32       	cpi	r24, 0x20	; 32
    15f0:	79 f0       	breq	.+30     	; 0x1610 <vfprintf+0x8a>
    15f2:	83 32       	cpi	r24, 0x23	; 35
    15f4:	a1 f4       	brne	.+40     	; 0x161e <vfprintf+0x98>
    15f6:	23 2d       	mov	r18, r3
    15f8:	20 61       	ori	r18, 0x10	; 16
    15fa:	1d c0       	rjmp	.+58     	; 0x1636 <vfprintf+0xb0>
    15fc:	8d 32       	cpi	r24, 0x2D	; 45
    15fe:	61 f0       	breq	.+24     	; 0x1618 <vfprintf+0x92>
    1600:	80 33       	cpi	r24, 0x30	; 48
    1602:	69 f4       	brne	.+26     	; 0x161e <vfprintf+0x98>
    1604:	23 2d       	mov	r18, r3
    1606:	21 60       	ori	r18, 0x01	; 1
    1608:	16 c0       	rjmp	.+44     	; 0x1636 <vfprintf+0xb0>
    160a:	83 2d       	mov	r24, r3
    160c:	82 60       	ori	r24, 0x02	; 2
    160e:	38 2e       	mov	r3, r24
    1610:	e3 2d       	mov	r30, r3
    1612:	e4 60       	ori	r30, 0x04	; 4
    1614:	3e 2e       	mov	r3, r30
    1616:	2a c0       	rjmp	.+84     	; 0x166c <vfprintf+0xe6>
    1618:	f3 2d       	mov	r31, r3
    161a:	f8 60       	ori	r31, 0x08	; 8
    161c:	1d c0       	rjmp	.+58     	; 0x1658 <vfprintf+0xd2>
    161e:	37 fc       	sbrc	r3, 7
    1620:	2d c0       	rjmp	.+90     	; 0x167c <vfprintf+0xf6>
    1622:	20 ed       	ldi	r18, 0xD0	; 208
    1624:	28 0f       	add	r18, r24
    1626:	2a 30       	cpi	r18, 0x0A	; 10
    1628:	40 f0       	brcs	.+16     	; 0x163a <vfprintf+0xb4>
    162a:	8e 32       	cpi	r24, 0x2E	; 46
    162c:	b9 f4       	brne	.+46     	; 0x165c <vfprintf+0xd6>
    162e:	36 fc       	sbrc	r3, 6
    1630:	81 c1       	rjmp	.+770    	; 0x1934 <vfprintf+0x3ae>
    1632:	23 2d       	mov	r18, r3
    1634:	20 64       	ori	r18, 0x40	; 64
    1636:	32 2e       	mov	r3, r18
    1638:	19 c0       	rjmp	.+50     	; 0x166c <vfprintf+0xe6>
    163a:	36 fe       	sbrs	r3, 6
    163c:	06 c0       	rjmp	.+12     	; 0x164a <vfprintf+0xc4>
    163e:	8a e0       	ldi	r24, 0x0A	; 10
    1640:	98 9e       	mul	r9, r24
    1642:	20 0d       	add	r18, r0
    1644:	11 24       	eor	r1, r1
    1646:	92 2e       	mov	r9, r18
    1648:	11 c0       	rjmp	.+34     	; 0x166c <vfprintf+0xe6>
    164a:	ea e0       	ldi	r30, 0x0A	; 10
    164c:	2e 9e       	mul	r2, r30
    164e:	20 0d       	add	r18, r0
    1650:	11 24       	eor	r1, r1
    1652:	22 2e       	mov	r2, r18
    1654:	f3 2d       	mov	r31, r3
    1656:	f0 62       	ori	r31, 0x20	; 32
    1658:	3f 2e       	mov	r3, r31
    165a:	08 c0       	rjmp	.+16     	; 0x166c <vfprintf+0xe6>
    165c:	8c 36       	cpi	r24, 0x6C	; 108
    165e:	21 f4       	brne	.+8      	; 0x1668 <vfprintf+0xe2>
    1660:	83 2d       	mov	r24, r3
    1662:	80 68       	ori	r24, 0x80	; 128
    1664:	38 2e       	mov	r3, r24
    1666:	02 c0       	rjmp	.+4      	; 0x166c <vfprintf+0xe6>
    1668:	88 36       	cpi	r24, 0x68	; 104
    166a:	41 f4       	brne	.+16     	; 0x167c <vfprintf+0xf6>
    166c:	f7 01       	movw	r30, r14
    166e:	93 fd       	sbrc	r25, 3
    1670:	85 91       	lpm	r24, Z+
    1672:	93 ff       	sbrs	r25, 3
    1674:	81 91       	ld	r24, Z+
    1676:	7f 01       	movw	r14, r30
    1678:	81 11       	cpse	r24, r1
    167a:	b3 cf       	rjmp	.-154    	; 0x15e2 <vfprintf+0x5c>
    167c:	98 2f       	mov	r25, r24
    167e:	9f 7d       	andi	r25, 0xDF	; 223
    1680:	95 54       	subi	r25, 0x45	; 69
    1682:	93 30       	cpi	r25, 0x03	; 3
    1684:	28 f4       	brcc	.+10     	; 0x1690 <vfprintf+0x10a>
    1686:	0c 5f       	subi	r16, 0xFC	; 252
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	9f e3       	ldi	r25, 0x3F	; 63
    168c:	99 83       	std	Y+1, r25	; 0x01
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <vfprintf+0x124>
    1690:	83 36       	cpi	r24, 0x63	; 99
    1692:	31 f0       	breq	.+12     	; 0x16a0 <vfprintf+0x11a>
    1694:	83 37       	cpi	r24, 0x73	; 115
    1696:	71 f0       	breq	.+28     	; 0x16b4 <vfprintf+0x12e>
    1698:	83 35       	cpi	r24, 0x53	; 83
    169a:	09 f0       	breq	.+2      	; 0x169e <vfprintf+0x118>
    169c:	59 c0       	rjmp	.+178    	; 0x1750 <vfprintf+0x1ca>
    169e:	21 c0       	rjmp	.+66     	; 0x16e2 <vfprintf+0x15c>
    16a0:	f8 01       	movw	r30, r16
    16a2:	80 81       	ld	r24, Z
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	0e 5f       	subi	r16, 0xFE	; 254
    16a8:	1f 4f       	sbci	r17, 0xFF	; 255
    16aa:	88 24       	eor	r8, r8
    16ac:	83 94       	inc	r8
    16ae:	91 2c       	mov	r9, r1
    16b0:	53 01       	movw	r10, r6
    16b2:	13 c0       	rjmp	.+38     	; 0x16da <vfprintf+0x154>
    16b4:	28 01       	movw	r4, r16
    16b6:	f2 e0       	ldi	r31, 0x02	; 2
    16b8:	4f 0e       	add	r4, r31
    16ba:	51 1c       	adc	r5, r1
    16bc:	f8 01       	movw	r30, r16
    16be:	a0 80       	ld	r10, Z
    16c0:	b1 80       	ldd	r11, Z+1	; 0x01
    16c2:	36 fe       	sbrs	r3, 6
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <vfprintf+0x146>
    16c6:	69 2d       	mov	r22, r9
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x14a>
    16cc:	6f ef       	ldi	r22, 0xFF	; 255
    16ce:	7f ef       	ldi	r23, 0xFF	; 255
    16d0:	c5 01       	movw	r24, r10
    16d2:	0e 94 af 0c 	call	0x195e	; 0x195e <strnlen>
    16d6:	4c 01       	movw	r8, r24
    16d8:	82 01       	movw	r16, r4
    16da:	f3 2d       	mov	r31, r3
    16dc:	ff 77       	andi	r31, 0x7F	; 127
    16de:	3f 2e       	mov	r3, r31
    16e0:	16 c0       	rjmp	.+44     	; 0x170e <vfprintf+0x188>
    16e2:	28 01       	movw	r4, r16
    16e4:	22 e0       	ldi	r18, 0x02	; 2
    16e6:	42 0e       	add	r4, r18
    16e8:	51 1c       	adc	r5, r1
    16ea:	f8 01       	movw	r30, r16
    16ec:	a0 80       	ld	r10, Z
    16ee:	b1 80       	ldd	r11, Z+1	; 0x01
    16f0:	36 fe       	sbrs	r3, 6
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <vfprintf+0x174>
    16f4:	69 2d       	mov	r22, r9
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <vfprintf+0x178>
    16fa:	6f ef       	ldi	r22, 0xFF	; 255
    16fc:	7f ef       	ldi	r23, 0xFF	; 255
    16fe:	c5 01       	movw	r24, r10
    1700:	0e 94 a4 0c 	call	0x1948	; 0x1948 <strnlen_P>
    1704:	4c 01       	movw	r8, r24
    1706:	f3 2d       	mov	r31, r3
    1708:	f0 68       	ori	r31, 0x80	; 128
    170a:	3f 2e       	mov	r3, r31
    170c:	82 01       	movw	r16, r4
    170e:	33 fc       	sbrc	r3, 3
    1710:	1b c0       	rjmp	.+54     	; 0x1748 <vfprintf+0x1c2>
    1712:	82 2d       	mov	r24, r2
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	88 16       	cp	r8, r24
    1718:	99 06       	cpc	r9, r25
    171a:	b0 f4       	brcc	.+44     	; 0x1748 <vfprintf+0x1c2>
    171c:	b6 01       	movw	r22, r12
    171e:	80 e2       	ldi	r24, 0x20	; 32
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1726:	2a 94       	dec	r2
    1728:	f4 cf       	rjmp	.-24     	; 0x1712 <vfprintf+0x18c>
    172a:	f5 01       	movw	r30, r10
    172c:	37 fc       	sbrc	r3, 7
    172e:	85 91       	lpm	r24, Z+
    1730:	37 fe       	sbrs	r3, 7
    1732:	81 91       	ld	r24, Z+
    1734:	5f 01       	movw	r10, r30
    1736:	b6 01       	movw	r22, r12
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    173e:	21 10       	cpse	r2, r1
    1740:	2a 94       	dec	r2
    1742:	21 e0       	ldi	r18, 0x01	; 1
    1744:	82 1a       	sub	r8, r18
    1746:	91 08       	sbc	r9, r1
    1748:	81 14       	cp	r8, r1
    174a:	91 04       	cpc	r9, r1
    174c:	71 f7       	brne	.-36     	; 0x172a <vfprintf+0x1a4>
    174e:	e8 c0       	rjmp	.+464    	; 0x1920 <vfprintf+0x39a>
    1750:	84 36       	cpi	r24, 0x64	; 100
    1752:	11 f0       	breq	.+4      	; 0x1758 <vfprintf+0x1d2>
    1754:	89 36       	cpi	r24, 0x69	; 105
    1756:	41 f5       	brne	.+80     	; 0x17a8 <vfprintf+0x222>
    1758:	f8 01       	movw	r30, r16
    175a:	37 fe       	sbrs	r3, 7
    175c:	07 c0       	rjmp	.+14     	; 0x176c <vfprintf+0x1e6>
    175e:	60 81       	ld	r22, Z
    1760:	71 81       	ldd	r23, Z+1	; 0x01
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	0c 5f       	subi	r16, 0xFC	; 252
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	08 c0       	rjmp	.+16     	; 0x177c <vfprintf+0x1f6>
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	07 2e       	mov	r0, r23
    1772:	00 0c       	add	r0, r0
    1774:	88 0b       	sbc	r24, r24
    1776:	99 0b       	sbc	r25, r25
    1778:	0e 5f       	subi	r16, 0xFE	; 254
    177a:	1f 4f       	sbci	r17, 0xFF	; 255
    177c:	f3 2d       	mov	r31, r3
    177e:	ff 76       	andi	r31, 0x6F	; 111
    1780:	3f 2e       	mov	r3, r31
    1782:	97 ff       	sbrs	r25, 7
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <vfprintf+0x212>
    1786:	90 95       	com	r25
    1788:	80 95       	com	r24
    178a:	70 95       	com	r23
    178c:	61 95       	neg	r22
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	8f 4f       	sbci	r24, 0xFF	; 255
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	f0 68       	ori	r31, 0x80	; 128
    1796:	3f 2e       	mov	r3, r31
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	a3 01       	movw	r20, r6
    179e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__ultoa_invert>
    17a2:	88 2e       	mov	r8, r24
    17a4:	86 18       	sub	r8, r6
    17a6:	45 c0       	rjmp	.+138    	; 0x1832 <vfprintf+0x2ac>
    17a8:	85 37       	cpi	r24, 0x75	; 117
    17aa:	31 f4       	brne	.+12     	; 0x17b8 <vfprintf+0x232>
    17ac:	23 2d       	mov	r18, r3
    17ae:	2f 7e       	andi	r18, 0xEF	; 239
    17b0:	b2 2e       	mov	r11, r18
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	25 c0       	rjmp	.+74     	; 0x1802 <vfprintf+0x27c>
    17b8:	93 2d       	mov	r25, r3
    17ba:	99 7f       	andi	r25, 0xF9	; 249
    17bc:	b9 2e       	mov	r11, r25
    17be:	8f 36       	cpi	r24, 0x6F	; 111
    17c0:	c1 f0       	breq	.+48     	; 0x17f2 <vfprintf+0x26c>
    17c2:	18 f4       	brcc	.+6      	; 0x17ca <vfprintf+0x244>
    17c4:	88 35       	cpi	r24, 0x58	; 88
    17c6:	79 f0       	breq	.+30     	; 0x17e6 <vfprintf+0x260>
    17c8:	b5 c0       	rjmp	.+362    	; 0x1934 <vfprintf+0x3ae>
    17ca:	80 37       	cpi	r24, 0x70	; 112
    17cc:	19 f0       	breq	.+6      	; 0x17d4 <vfprintf+0x24e>
    17ce:	88 37       	cpi	r24, 0x78	; 120
    17d0:	21 f0       	breq	.+8      	; 0x17da <vfprintf+0x254>
    17d2:	b0 c0       	rjmp	.+352    	; 0x1934 <vfprintf+0x3ae>
    17d4:	e9 2f       	mov	r30, r25
    17d6:	e0 61       	ori	r30, 0x10	; 16
    17d8:	be 2e       	mov	r11, r30
    17da:	b4 fe       	sbrs	r11, 4
    17dc:	0d c0       	rjmp	.+26     	; 0x17f8 <vfprintf+0x272>
    17de:	fb 2d       	mov	r31, r11
    17e0:	f4 60       	ori	r31, 0x04	; 4
    17e2:	bf 2e       	mov	r11, r31
    17e4:	09 c0       	rjmp	.+18     	; 0x17f8 <vfprintf+0x272>
    17e6:	34 fe       	sbrs	r3, 4
    17e8:	0a c0       	rjmp	.+20     	; 0x17fe <vfprintf+0x278>
    17ea:	29 2f       	mov	r18, r25
    17ec:	26 60       	ori	r18, 0x06	; 6
    17ee:	b2 2e       	mov	r11, r18
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <vfprintf+0x278>
    17f2:	28 e0       	ldi	r18, 0x08	; 8
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <vfprintf+0x27c>
    17f8:	20 e1       	ldi	r18, 0x10	; 16
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <vfprintf+0x27c>
    17fe:	20 e1       	ldi	r18, 0x10	; 16
    1800:	32 e0       	ldi	r19, 0x02	; 2
    1802:	f8 01       	movw	r30, r16
    1804:	b7 fe       	sbrs	r11, 7
    1806:	07 c0       	rjmp	.+14     	; 0x1816 <vfprintf+0x290>
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	0c 5f       	subi	r16, 0xFC	; 252
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <vfprintf+0x29c>
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 5f       	subi	r16, 0xFE	; 254
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	a3 01       	movw	r20, r6
    1824:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__ultoa_invert>
    1828:	88 2e       	mov	r8, r24
    182a:	86 18       	sub	r8, r6
    182c:	fb 2d       	mov	r31, r11
    182e:	ff 77       	andi	r31, 0x7F	; 127
    1830:	3f 2e       	mov	r3, r31
    1832:	36 fe       	sbrs	r3, 6
    1834:	0d c0       	rjmp	.+26     	; 0x1850 <vfprintf+0x2ca>
    1836:	23 2d       	mov	r18, r3
    1838:	2e 7f       	andi	r18, 0xFE	; 254
    183a:	a2 2e       	mov	r10, r18
    183c:	89 14       	cp	r8, r9
    183e:	58 f4       	brcc	.+22     	; 0x1856 <vfprintf+0x2d0>
    1840:	34 fe       	sbrs	r3, 4
    1842:	0b c0       	rjmp	.+22     	; 0x185a <vfprintf+0x2d4>
    1844:	32 fc       	sbrc	r3, 2
    1846:	09 c0       	rjmp	.+18     	; 0x185a <vfprintf+0x2d4>
    1848:	83 2d       	mov	r24, r3
    184a:	8e 7e       	andi	r24, 0xEE	; 238
    184c:	a8 2e       	mov	r10, r24
    184e:	05 c0       	rjmp	.+10     	; 0x185a <vfprintf+0x2d4>
    1850:	b8 2c       	mov	r11, r8
    1852:	a3 2c       	mov	r10, r3
    1854:	03 c0       	rjmp	.+6      	; 0x185c <vfprintf+0x2d6>
    1856:	b8 2c       	mov	r11, r8
    1858:	01 c0       	rjmp	.+2      	; 0x185c <vfprintf+0x2d6>
    185a:	b9 2c       	mov	r11, r9
    185c:	a4 fe       	sbrs	r10, 4
    185e:	0f c0       	rjmp	.+30     	; 0x187e <vfprintf+0x2f8>
    1860:	fe 01       	movw	r30, r28
    1862:	e8 0d       	add	r30, r8
    1864:	f1 1d       	adc	r31, r1
    1866:	80 81       	ld	r24, Z
    1868:	80 33       	cpi	r24, 0x30	; 48
    186a:	21 f4       	brne	.+8      	; 0x1874 <vfprintf+0x2ee>
    186c:	9a 2d       	mov	r25, r10
    186e:	99 7e       	andi	r25, 0xE9	; 233
    1870:	a9 2e       	mov	r10, r25
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <vfprintf+0x300>
    1874:	a2 fe       	sbrs	r10, 2
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <vfprintf+0x2fe>
    1878:	b3 94       	inc	r11
    187a:	b3 94       	inc	r11
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <vfprintf+0x300>
    187e:	8a 2d       	mov	r24, r10
    1880:	86 78       	andi	r24, 0x86	; 134
    1882:	09 f0       	breq	.+2      	; 0x1886 <vfprintf+0x300>
    1884:	b3 94       	inc	r11
    1886:	a3 fc       	sbrc	r10, 3
    1888:	11 c0       	rjmp	.+34     	; 0x18ac <vfprintf+0x326>
    188a:	a0 fe       	sbrs	r10, 0
    188c:	06 c0       	rjmp	.+12     	; 0x189a <vfprintf+0x314>
    188e:	b2 14       	cp	r11, r2
    1890:	88 f4       	brcc	.+34     	; 0x18b4 <vfprintf+0x32e>
    1892:	28 0c       	add	r2, r8
    1894:	92 2c       	mov	r9, r2
    1896:	9b 18       	sub	r9, r11
    1898:	0e c0       	rjmp	.+28     	; 0x18b6 <vfprintf+0x330>
    189a:	b2 14       	cp	r11, r2
    189c:	60 f4       	brcc	.+24     	; 0x18b6 <vfprintf+0x330>
    189e:	b6 01       	movw	r22, r12
    18a0:	80 e2       	ldi	r24, 0x20	; 32
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    18a8:	b3 94       	inc	r11
    18aa:	f7 cf       	rjmp	.-18     	; 0x189a <vfprintf+0x314>
    18ac:	b2 14       	cp	r11, r2
    18ae:	18 f4       	brcc	.+6      	; 0x18b6 <vfprintf+0x330>
    18b0:	2b 18       	sub	r2, r11
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <vfprintf+0x332>
    18b4:	98 2c       	mov	r9, r8
    18b6:	21 2c       	mov	r2, r1
    18b8:	a4 fe       	sbrs	r10, 4
    18ba:	10 c0       	rjmp	.+32     	; 0x18dc <vfprintf+0x356>
    18bc:	b6 01       	movw	r22, r12
    18be:	80 e3       	ldi	r24, 0x30	; 48
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    18c6:	a2 fe       	sbrs	r10, 2
    18c8:	17 c0       	rjmp	.+46     	; 0x18f8 <vfprintf+0x372>
    18ca:	a1 fc       	sbrc	r10, 1
    18cc:	03 c0       	rjmp	.+6      	; 0x18d4 <vfprintf+0x34e>
    18ce:	88 e7       	ldi	r24, 0x78	; 120
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <vfprintf+0x352>
    18d4:	88 e5       	ldi	r24, 0x58	; 88
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	b6 01       	movw	r22, r12
    18da:	0c c0       	rjmp	.+24     	; 0x18f4 <vfprintf+0x36e>
    18dc:	8a 2d       	mov	r24, r10
    18de:	86 78       	andi	r24, 0x86	; 134
    18e0:	59 f0       	breq	.+22     	; 0x18f8 <vfprintf+0x372>
    18e2:	a1 fe       	sbrs	r10, 1
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <vfprintf+0x364>
    18e6:	8b e2       	ldi	r24, 0x2B	; 43
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <vfprintf+0x366>
    18ea:	80 e2       	ldi	r24, 0x20	; 32
    18ec:	a7 fc       	sbrc	r10, 7
    18ee:	8d e2       	ldi	r24, 0x2D	; 45
    18f0:	b6 01       	movw	r22, r12
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    18f8:	89 14       	cp	r8, r9
    18fa:	38 f4       	brcc	.+14     	; 0x190a <vfprintf+0x384>
    18fc:	b6 01       	movw	r22, r12
    18fe:	80 e3       	ldi	r24, 0x30	; 48
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1906:	9a 94       	dec	r9
    1908:	f7 cf       	rjmp	.-18     	; 0x18f8 <vfprintf+0x372>
    190a:	8a 94       	dec	r8
    190c:	f3 01       	movw	r30, r6
    190e:	e8 0d       	add	r30, r8
    1910:	f1 1d       	adc	r31, r1
    1912:	80 81       	ld	r24, Z
    1914:	b6 01       	movw	r22, r12
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    191c:	81 10       	cpse	r8, r1
    191e:	f5 cf       	rjmp	.-22     	; 0x190a <vfprintf+0x384>
    1920:	22 20       	and	r2, r2
    1922:	09 f4       	brne	.+2      	; 0x1926 <vfprintf+0x3a0>
    1924:	42 ce       	rjmp	.-892    	; 0x15aa <vfprintf+0x24>
    1926:	b6 01       	movw	r22, r12
    1928:	80 e2       	ldi	r24, 0x20	; 32
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1930:	2a 94       	dec	r2
    1932:	f6 cf       	rjmp	.-20     	; 0x1920 <vfprintf+0x39a>
    1934:	f6 01       	movw	r30, r12
    1936:	86 81       	ldd	r24, Z+6	; 0x06
    1938:	97 81       	ldd	r25, Z+7	; 0x07
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <vfprintf+0x3ba>
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	9f ef       	ldi	r25, 0xFF	; 255
    1940:	2b 96       	adiw	r28, 0x0b	; 11
    1942:	e2 e1       	ldi	r30, 0x12	; 18
    1944:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__epilogue_restores__>

00001948 <strnlen_P>:
    1948:	fc 01       	movw	r30, r24
    194a:	05 90       	lpm	r0, Z+
    194c:	61 50       	subi	r22, 0x01	; 1
    194e:	70 40       	sbci	r23, 0x00	; 0
    1950:	01 10       	cpse	r0, r1
    1952:	d8 f7       	brcc	.-10     	; 0x194a <strnlen_P+0x2>
    1954:	80 95       	com	r24
    1956:	90 95       	com	r25
    1958:	8e 0f       	add	r24, r30
    195a:	9f 1f       	adc	r25, r31
    195c:	08 95       	ret

0000195e <strnlen>:
    195e:	fc 01       	movw	r30, r24
    1960:	61 50       	subi	r22, 0x01	; 1
    1962:	70 40       	sbci	r23, 0x00	; 0
    1964:	01 90       	ld	r0, Z+
    1966:	01 10       	cpse	r0, r1
    1968:	d8 f7       	brcc	.-10     	; 0x1960 <strnlen+0x2>
    196a:	80 95       	com	r24
    196c:	90 95       	com	r25
    196e:	8e 0f       	add	r24, r30
    1970:	9f 1f       	adc	r25, r31
    1972:	08 95       	ret

00001974 <fputc>:
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	fb 01       	movw	r30, r22
    197e:	23 81       	ldd	r18, Z+3	; 0x03
    1980:	21 fd       	sbrc	r18, 1
    1982:	03 c0       	rjmp	.+6      	; 0x198a <fputc+0x16>
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	9f ef       	ldi	r25, 0xFF	; 255
    1988:	2c c0       	rjmp	.+88     	; 0x19e2 <fputc+0x6e>
    198a:	22 ff       	sbrs	r18, 2
    198c:	16 c0       	rjmp	.+44     	; 0x19ba <fputc+0x46>
    198e:	46 81       	ldd	r20, Z+6	; 0x06
    1990:	57 81       	ldd	r21, Z+7	; 0x07
    1992:	24 81       	ldd	r18, Z+4	; 0x04
    1994:	35 81       	ldd	r19, Z+5	; 0x05
    1996:	42 17       	cp	r20, r18
    1998:	53 07       	cpc	r21, r19
    199a:	44 f4       	brge	.+16     	; 0x19ac <fputc+0x38>
    199c:	a0 81       	ld	r26, Z
    199e:	b1 81       	ldd	r27, Z+1	; 0x01
    19a0:	9d 01       	movw	r18, r26
    19a2:	2f 5f       	subi	r18, 0xFF	; 255
    19a4:	3f 4f       	sbci	r19, 0xFF	; 255
    19a6:	31 83       	std	Z+1, r19	; 0x01
    19a8:	20 83       	st	Z, r18
    19aa:	8c 93       	st	X, r24
    19ac:	26 81       	ldd	r18, Z+6	; 0x06
    19ae:	37 81       	ldd	r19, Z+7	; 0x07
    19b0:	2f 5f       	subi	r18, 0xFF	; 255
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	37 83       	std	Z+7, r19	; 0x07
    19b6:	26 83       	std	Z+6, r18	; 0x06
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <fputc+0x6e>
    19ba:	8b 01       	movw	r16, r22
    19bc:	ec 01       	movw	r28, r24
    19be:	fb 01       	movw	r30, r22
    19c0:	00 84       	ldd	r0, Z+8	; 0x08
    19c2:	f1 85       	ldd	r31, Z+9	; 0x09
    19c4:	e0 2d       	mov	r30, r0
    19c6:	09 95       	icall
    19c8:	89 2b       	or	r24, r25
    19ca:	e1 f6       	brne	.-72     	; 0x1984 <fputc+0x10>
    19cc:	d8 01       	movw	r26, r16
    19ce:	16 96       	adiw	r26, 0x06	; 6
    19d0:	8d 91       	ld	r24, X+
    19d2:	9c 91       	ld	r25, X
    19d4:	17 97       	sbiw	r26, 0x07	; 7
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	17 96       	adiw	r26, 0x07	; 7
    19da:	9c 93       	st	X, r25
    19dc:	8e 93       	st	-X, r24
    19de:	16 97       	sbiw	r26, 0x06	; 6
    19e0:	ce 01       	movw	r24, r28
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	08 95       	ret

000019ec <__ultoa_invert>:
    19ec:	fa 01       	movw	r30, r20
    19ee:	aa 27       	eor	r26, r26
    19f0:	28 30       	cpi	r18, 0x08	; 8
    19f2:	51 f1       	breq	.+84     	; 0x1a48 <__ultoa_invert+0x5c>
    19f4:	20 31       	cpi	r18, 0x10	; 16
    19f6:	81 f1       	breq	.+96     	; 0x1a58 <__ultoa_invert+0x6c>
    19f8:	e8 94       	clt
    19fa:	6f 93       	push	r22
    19fc:	6e 7f       	andi	r22, 0xFE	; 254
    19fe:	6e 5f       	subi	r22, 0xFE	; 254
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	8f 4f       	sbci	r24, 0xFF	; 255
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	af 4f       	sbci	r26, 0xFF	; 255
    1a08:	b1 e0       	ldi	r27, 0x01	; 1
    1a0a:	3e d0       	rcall	.+124    	; 0x1a88 <__ultoa_invert+0x9c>
    1a0c:	b4 e0       	ldi	r27, 0x04	; 4
    1a0e:	3c d0       	rcall	.+120    	; 0x1a88 <__ultoa_invert+0x9c>
    1a10:	67 0f       	add	r22, r23
    1a12:	78 1f       	adc	r23, r24
    1a14:	89 1f       	adc	r24, r25
    1a16:	9a 1f       	adc	r25, r26
    1a18:	a1 1d       	adc	r26, r1
    1a1a:	68 0f       	add	r22, r24
    1a1c:	79 1f       	adc	r23, r25
    1a1e:	8a 1f       	adc	r24, r26
    1a20:	91 1d       	adc	r25, r1
    1a22:	a1 1d       	adc	r26, r1
    1a24:	6a 0f       	add	r22, r26
    1a26:	71 1d       	adc	r23, r1
    1a28:	81 1d       	adc	r24, r1
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	a1 1d       	adc	r26, r1
    1a2e:	20 d0       	rcall	.+64     	; 0x1a70 <__ultoa_invert+0x84>
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <__ultoa_invert+0x48>
    1a32:	68 94       	set
    1a34:	3f 91       	pop	r19
    1a36:	2a e0       	ldi	r18, 0x0A	; 10
    1a38:	26 9f       	mul	r18, r22
    1a3a:	11 24       	eor	r1, r1
    1a3c:	30 19       	sub	r19, r0
    1a3e:	30 5d       	subi	r19, 0xD0	; 208
    1a40:	31 93       	st	Z+, r19
    1a42:	de f6       	brtc	.-74     	; 0x19fa <__ultoa_invert+0xe>
    1a44:	cf 01       	movw	r24, r30
    1a46:	08 95       	ret
    1a48:	46 2f       	mov	r20, r22
    1a4a:	47 70       	andi	r20, 0x07	; 7
    1a4c:	40 5d       	subi	r20, 0xD0	; 208
    1a4e:	41 93       	st	Z+, r20
    1a50:	b3 e0       	ldi	r27, 0x03	; 3
    1a52:	0f d0       	rcall	.+30     	; 0x1a72 <__ultoa_invert+0x86>
    1a54:	c9 f7       	brne	.-14     	; 0x1a48 <__ultoa_invert+0x5c>
    1a56:	f6 cf       	rjmp	.-20     	; 0x1a44 <__ultoa_invert+0x58>
    1a58:	46 2f       	mov	r20, r22
    1a5a:	4f 70       	andi	r20, 0x0F	; 15
    1a5c:	40 5d       	subi	r20, 0xD0	; 208
    1a5e:	4a 33       	cpi	r20, 0x3A	; 58
    1a60:	18 f0       	brcs	.+6      	; 0x1a68 <__ultoa_invert+0x7c>
    1a62:	49 5d       	subi	r20, 0xD9	; 217
    1a64:	31 fd       	sbrc	r19, 1
    1a66:	40 52       	subi	r20, 0x20	; 32
    1a68:	41 93       	st	Z+, r20
    1a6a:	02 d0       	rcall	.+4      	; 0x1a70 <__ultoa_invert+0x84>
    1a6c:	a9 f7       	brne	.-22     	; 0x1a58 <__ultoa_invert+0x6c>
    1a6e:	ea cf       	rjmp	.-44     	; 0x1a44 <__ultoa_invert+0x58>
    1a70:	b4 e0       	ldi	r27, 0x04	; 4
    1a72:	a6 95       	lsr	r26
    1a74:	97 95       	ror	r25
    1a76:	87 95       	ror	r24
    1a78:	77 95       	ror	r23
    1a7a:	67 95       	ror	r22
    1a7c:	ba 95       	dec	r27
    1a7e:	c9 f7       	brne	.-14     	; 0x1a72 <__ultoa_invert+0x86>
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	61 05       	cpc	r22, r1
    1a84:	71 05       	cpc	r23, r1
    1a86:	08 95       	ret
    1a88:	9b 01       	movw	r18, r22
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	0a 2e       	mov	r0, r26
    1a8e:	06 94       	lsr	r0
    1a90:	57 95       	ror	r21
    1a92:	47 95       	ror	r20
    1a94:	37 95       	ror	r19
    1a96:	27 95       	ror	r18
    1a98:	ba 95       	dec	r27
    1a9a:	c9 f7       	brne	.-14     	; 0x1a8e <__ultoa_invert+0xa2>
    1a9c:	62 0f       	add	r22, r18
    1a9e:	73 1f       	adc	r23, r19
    1aa0:	84 1f       	adc	r24, r20
    1aa2:	95 1f       	adc	r25, r21
    1aa4:	a0 1d       	adc	r26, r0
    1aa6:	08 95       	ret

00001aa8 <__prologue_saves__>:
    1aa8:	2f 92       	push	r2
    1aaa:	3f 92       	push	r3
    1aac:	4f 92       	push	r4
    1aae:	5f 92       	push	r5
    1ab0:	6f 92       	push	r6
    1ab2:	7f 92       	push	r7
    1ab4:	8f 92       	push	r8
    1ab6:	9f 92       	push	r9
    1ab8:	af 92       	push	r10
    1aba:	bf 92       	push	r11
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	ca 1b       	sub	r28, r26
    1ad2:	db 0b       	sbc	r29, r27
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	09 94       	ijmp

00001ae0 <__epilogue_restores__>:
    1ae0:	2a 88       	ldd	r2, Y+18	; 0x12
    1ae2:	39 88       	ldd	r3, Y+17	; 0x11
    1ae4:	48 88       	ldd	r4, Y+16	; 0x10
    1ae6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ae8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1aea:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aec:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aee:	9b 84       	ldd	r9, Y+11	; 0x0b
    1af0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1af2:	b9 84       	ldd	r11, Y+9	; 0x09
    1af4:	c8 84       	ldd	r12, Y+8	; 0x08
    1af6:	df 80       	ldd	r13, Y+7	; 0x07
    1af8:	ee 80       	ldd	r14, Y+6	; 0x06
    1afa:	fd 80       	ldd	r15, Y+5	; 0x05
    1afc:	0c 81       	ldd	r16, Y+4	; 0x04
    1afe:	1b 81       	ldd	r17, Y+3	; 0x03
    1b00:	aa 81       	ldd	r26, Y+2	; 0x02
    1b02:	b9 81       	ldd	r27, Y+1	; 0x01
    1b04:	ce 0f       	add	r28, r30
    1b06:	d1 1d       	adc	r29, r1
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	ed 01       	movw	r28, r26
    1b14:	08 95       	ret

00001b16 <_exit>:
    1b16:	f8 94       	cli

00001b18 <__stop_program>:
    1b18:	ff cf       	rjmp	.-2      	; 0x1b18 <__stop_program>
