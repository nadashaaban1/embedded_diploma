
atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000238  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000267  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000737  00000000  00000000  00000297  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000052c  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000256  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000196  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000be  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001e0  000001e0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.GPIO_init 00000058  00000188  00000188  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.my_delay 0000005e  0000012a  0000012a  0000017e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    000000be  0000006c  0000006c  000000c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
   8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
   c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 34 00 	jmp	0x68	; 0x68 <_exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000001e0 <__bad_interrupt>:
 1e0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.GPIO_init:

00000188 <GPIO_init>:

#define DDRD   *((volatile unsigned char *)(0x31))
#define PORTD   *((volatile unsigned char *)(0x32))

void GPIO_init()
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	set_bit(DDRD,4);
 190:	81 e3       	ldi	r24, 0x31	; 49
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	21 e3       	ldi	r18, 0x31	; 49
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	f9 01       	movw	r30, r18
 19a:	20 81       	ld	r18, Z
 19c:	20 61       	ori	r18, 0x10	; 16
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
	set_bit(DDRD,5);
 1a2:	81 e3       	ldi	r24, 0x31	; 49
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	21 e3       	ldi	r18, 0x31	; 49
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	20 62       	ori	r18, 0x20	; 32
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
	set_bit(DDRD,6);
 1b4:	81 e3       	ldi	r24, 0x31	; 49
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	21 e3       	ldi	r18, 0x31	; 49
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	f9 01       	movw	r30, r18
 1be:	20 81       	ld	r18, Z
 1c0:	20 64       	ori	r18, 0x40	; 64
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
	set_bit(DDRD,7);
 1c6:	81 e3       	ldi	r24, 0x31	; 49
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	21 e3       	ldi	r18, 0x31	; 49
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	20 81       	ld	r18, Z
 1d2:	20 68       	ori	r18, 0x80	; 128
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
}
 1d8:	00 00       	nop
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

Disassembly of section .text.my_delay:

0000012a <my_delay>:

void my_delay(int x)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	00 d0       	rcall	.+0      	; 0x130 <my_delay+0x6>
 130:	00 d0       	rcall	.+0      	; 0x132 <my_delay+0x8>
 132:	00 d0       	rcall	.+0      	; 0x134 <my_delay+0xa>
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	9e 83       	std	Y+6, r25	; 0x06
 13a:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for (i = 0; i < x; i++)
 13c:	1a 82       	std	Y+2, r1	; 0x02
 13e:	19 82       	std	Y+1, r1	; 0x01
 140:	12 c0       	rjmp	.+36     	; 0x166 <my_delay+0x3c>
	{
		for(j = 0; j < 1000; j++);
 142:	1c 82       	std	Y+4, r1	; 0x04
 144:	1b 82       	std	Y+3, r1	; 0x03
 146:	05 c0       	rjmp	.+10     	; 0x152 <my_delay+0x28>
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	9c 81       	ldd	r25, Y+4	; 0x04
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	9c 83       	std	Y+4, r25	; 0x04
 150:	8b 83       	std	Y+3, r24	; 0x03
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	9c 81       	ldd	r25, Y+4	; 0x04
 156:	88 3e       	cpi	r24, 0xE8	; 232
 158:	93 40       	sbci	r25, 0x03	; 3
 15a:	b4 f3       	brlt	.-20     	; 0x148 <my_delay+0x1e>
}

void my_delay(int x)
{
	int i,j;
	for (i = 0; i < x; i++)
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	29 81       	ldd	r18, Y+1	; 0x01
 168:	3a 81       	ldd	r19, Y+2	; 0x02
 16a:	8d 81       	ldd	r24, Y+5	; 0x05
 16c:	9e 81       	ldd	r25, Y+6	; 0x06
 16e:	28 17       	cp	r18, r24
 170:	39 07       	cpc	r19, r25
 172:	3c f3       	brlt	.-50     	; 0x142 <my_delay+0x18>
	{
		for(j = 0; j < 1000; j++);
	}
	
}
 174:	00 00       	nop
 176:	26 96       	adiw	r28, 0x06	; 6
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	GPIO_init();
  74:	0e 94 c4 00 	call	0x188	; 0x188 <GPIO_init>
	
    while(1)
    {
        set_bit(PORTD,5);
  78:	82 e3       	ldi	r24, 0x32	; 50
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	22 e3       	ldi	r18, 0x32	; 50
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	f9 01       	movw	r30, r18
  82:	20 81       	ld	r18, Z
  84:	20 62       	ori	r18, 0x20	; 32
  86:	fc 01       	movw	r30, r24
  88:	20 83       	st	Z, r18
        my_delay(200);
  8a:	88 ec       	ldi	r24, 0xC8	; 200
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 95 00 	call	0x12a	; 0x12a <my_delay>
        reset_bit(PORTD,5);
  92:	82 e3       	ldi	r24, 0x32	; 50
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	22 e3       	ldi	r18, 0x32	; 50
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	f9 01       	movw	r30, r18
  9c:	20 81       	ld	r18, Z
  9e:	2f 7d       	andi	r18, 0xDF	; 223
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18

        set_bit(PORTD,6);
  a4:	82 e3       	ldi	r24, 0x32	; 50
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	22 e3       	ldi	r18, 0x32	; 50
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	20 81       	ld	r18, Z
  b0:	20 64       	ori	r18, 0x40	; 64
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
        my_delay(200);
  b6:	88 ec       	ldi	r24, 0xC8	; 200
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 95 00 	call	0x12a	; 0x12a <my_delay>
        reset_bit(PORTD,6);
  be:	82 e3       	ldi	r24, 0x32	; 50
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	22 e3       	ldi	r18, 0x32	; 50
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	20 81       	ld	r18, Z
  ca:	2f 7b       	andi	r18, 0xBF	; 191
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
		
        set_bit(PORTD,7);
  d0:	82 e3       	ldi	r24, 0x32	; 50
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	22 e3       	ldi	r18, 0x32	; 50
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	20 68       	ori	r18, 0x80	; 128
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
        my_delay(200);
  e2:	88 ec       	ldi	r24, 0xC8	; 200
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 95 00 	call	0x12a	; 0x12a <my_delay>
        reset_bit(PORTD,7);
  ea:	82 e3       	ldi	r24, 0x32	; 50
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	22 e3       	ldi	r18, 0x32	; 50
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	2f 77       	andi	r18, 0x7F	; 127
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
		
        set_bit(PORTD,4);
  fc:	82 e3       	ldi	r24, 0x32	; 50
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	22 e3       	ldi	r18, 0x32	; 50
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	20 81       	ld	r18, Z
 108:	20 61       	ori	r18, 0x10	; 16
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
        my_delay(200);
 10e:	88 ec       	ldi	r24, 0xC8	; 200
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 95 00 	call	0x12a	; 0x12a <my_delay>
        reset_bit(PORTD,4);
 116:	82 e3       	ldi	r24, 0x32	; 50
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	22 e3       	ldi	r18, 0x32	; 50
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	2f 7e       	andi	r18, 0xEF	; 239
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
    }
 128:	a7 cf       	rjmp	.-178    	; 0x78 <main+0xc>
