
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000384  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000384  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000010d  00000000  00000000  000103ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000b4  00000000  00000000  000104ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000060  00000000  00000000  00010570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  000105d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f44  00000000  00000000  00010618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000461  00000000  00000000  0001155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003d1f  00000000  00000000  000119bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000156dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  00015758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000364 	.word	0x08000364

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000364 	.word	0x08000364

08000170 <clock_init>:
#define GPIOB_CRL    *((volatile uint32_t *)(GPIOB_BASE + 0x00))
#define GPIOB_IDR    *((volatile uint32_t *)(GPIOB_BASE + 0x08))


void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//enable GPIOA clock
	RCC_APB2ENR  |= (1<<2);
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	//enable GPIOB clock
	RCC_APB2ENR  |= (1<<3);
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <GPIO_init>:

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	GPIOA_CRH=0;
 800019c:	4b22      	ldr	r3, [pc, #136]	; (8000228 <GPIO_init+0x90>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
	GPIOA_CRL=0;
 80001a2:	4b22      	ldr	r3, [pc, #136]	; (800022c <GPIO_init+0x94>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
	GPIOA_ODR=0;
 80001a8:	4b21      	ldr	r3, [pc, #132]	; (8000230 <GPIO_init+0x98>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
	GPIOB_CRH=0;
 80001ae:	4b21      	ldr	r3, [pc, #132]	; (8000234 <GPIO_init+0x9c>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
	GPIOB_CRL=0;
 80001b4:	4b20      	ldr	r3, [pc, #128]	; (8000238 <GPIO_init+0xa0>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
	GPIOB_ODR=0;
 80001ba:	4b20      	ldr	r3, [pc, #128]	; (800023c <GPIO_init+0xa4>)
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]


	//PORTA1 input floating
	GPIOA_CRL &= ~(0b11<<4);
 80001c0:	4b1a      	ldr	r3, [pc, #104]	; (800022c <GPIO_init+0x94>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a19      	ldr	r2, [pc, #100]	; (800022c <GPIO_init+0x94>)
 80001c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001ca:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (0b01<<6);
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <GPIO_init+0x94>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a16      	ldr	r2, [pc, #88]	; (800022c <GPIO_init+0x94>)
 80001d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d6:	6013      	str	r3, [r2, #0]

	//PORTB1 output push pull
	GPIOB_CRL &= ~(0b11<<6);
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <GPIO_init+0xa0>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <GPIO_init+0xa0>)
 80001de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOB_CRL |= (0b01<<4);
 80001e4:	4b14      	ldr	r3, [pc, #80]	; (8000238 <GPIO_init+0xa0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a13      	ldr	r2, [pc, #76]	; (8000238 <GPIO_init+0xa0>)
 80001ea:	f043 0310 	orr.w	r3, r3, #16
 80001ee:	6013      	str	r3, [r2, #0]

	//PORTA13 input floating
	GPIOA_CRH &= ~(0b11<<20);
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <GPIO_init+0x90>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <GPIO_init+0x90>)
 80001f6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= (0b01<<22);
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <GPIO_init+0x90>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a09      	ldr	r2, [pc, #36]	; (8000228 <GPIO_init+0x90>)
 8000202:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000206:	6013      	str	r3, [r2, #0]

	//PORTB13 output push pull
	GPIOB_CRH |= (0b01<<20);
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <GPIO_init+0x9c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <GPIO_init+0x9c>)
 800020e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000212:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(0b11<<22);
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <GPIO_init+0x9c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <GPIO_init+0x9c>)
 800021a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800021e:	6013      	str	r3, [r2, #0]

}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	40010804 	.word	0x40010804
 800022c:	40010800 	.word	0x40010800
 8000230:	4001080c 	.word	0x4001080c
 8000234:	40010c04 	.word	0x40010c04
 8000238:	40010c00 	.word	0x40010c00
 800023c:	40010c0c 	.word	0x40010c0c

08000240 <my_wait>:

void my_wait(int x)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	unsigned int i;
	for(i=0;i<x;i++);
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	e002      	b.n	8000254 <my_wait+0x14>
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	3301      	adds	r3, #1
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	429a      	cmp	r2, r3
 800025a:	d3f8      	bcc.n	800024e <my_wait+0xe>
}
 800025c:	bf00      	nop
 800025e:	3714      	adds	r7, #20
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
	...

08000268 <main>:

int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	clock_init();
 800026c:	f7ff ff80 	bl	8000170 <clock_init>
	GPIO_init();
 8000270:	f7ff ff92 	bl	8000198 <GPIO_init>


	while(1)
	{
		//PORTA1 (pull up)
		if(((GPIOA_IDR & (1<<1)) >> 1) == 0) //single press
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <main+0x58>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f003 0302 	and.w	r3, r3, #2
 800027c:	2b00      	cmp	r3, #0
 800027e:	d10c      	bne.n	800029a <main+0x32>
		{
			GPIOB_ODR ^= 1<<1;
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <main+0x5c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <main+0x5c>)
 8000286:	f083 0302 	eor.w	r3, r3, #2
 800028a:	6013      	str	r3, [r2, #0]
			while(((GPIOA_IDR & (1<<1)) >> 1) == 0); //single press
 800028c:	bf00      	nop
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <main+0x58>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f003 0302 	and.w	r3, r3, #2
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0f9      	beq.n	800028e <main+0x26>
		}

		//PORTA13 (pull down)
		if(((GPIOA_IDR & (1<<13)) >> 13) == 1)
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <main+0x58>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	0b5b      	lsrs	r3, r3, #13
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d105      	bne.n	80002b4 <main+0x4c>
		{
			GPIOB_ODR ^= 1<<13;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <main+0x5c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <main+0x5c>)
 80002ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002b2:	6013      	str	r3, [r2, #0]

		}

		my_wait(500);
 80002b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b8:	f7ff ffc2 	bl	8000240 <my_wait>
		if(((GPIOA_IDR & (1<<1)) >> 1) == 0) //single press
 80002bc:	e7da      	b.n	8000274 <main+0xc>
 80002be:	bf00      	nop
 80002c0:	40010808 	.word	0x40010808
 80002c4:	40010c0c 	.word	0x40010c0c

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ffb5 	bl	8000268 <main>

080002fe <LoopForever>:

LoopForever:
    b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC1_2_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	2500      	movs	r5, #0
 8000320:	4e0c      	ldr	r6, [pc, #48]	; (8000354 <__libc_init_array+0x38>)
 8000322:	4c0d      	ldr	r4, [pc, #52]	; (8000358 <__libc_init_array+0x3c>)
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	42a5      	cmp	r5, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	f000 f81a 	bl	8000364 <_init>
 8000330:	2500      	movs	r5, #0
 8000332:	4e0a      	ldr	r6, [pc, #40]	; (800035c <__libc_init_array+0x40>)
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <__libc_init_array+0x44>)
 8000336:	1ba4      	subs	r4, r4, r6
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	42a5      	cmp	r5, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000344:	4798      	blx	r3
 8000346:	3501      	adds	r5, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800034e:	4798      	blx	r3
 8000350:	3501      	adds	r5, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
